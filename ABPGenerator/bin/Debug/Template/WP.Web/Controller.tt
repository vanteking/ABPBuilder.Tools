<#@ template language="C#" debug="true"  #>
<#@ output extension=".txt" #>
<#@ assembly name="System.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ parameter name="classname" type="System.String" #>
<#@ parameter name="lowername" type="System.String" #>
<#@ parameter name="permissionName" type="System.String" #>
<#
var name=(classname == null ? "" : classname);
var _lowername=(lowername == null ? "" : lowername);
var _permissionName=(permissionName == null ? "" : permissionName);
#>




//------------------------------------------------------------------------------
// <auto-generated>
//  此代码由T4模板自动生成
//  生成时间 <#=DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")#> 
// </auto-generated>
//------------------------------------------------------------------------------

using Abp.Web.Models;
using Abp.Web.Mvc.Authorization;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Web;
using System.Web.Mvc;
using WP.Authorization;
using WP.Common;

using WP.<#=name#>s;
using WP.<#=name#>s.Dto;

namespace WP.Web.Areas.EWebSysMgr.Controllers
{
    [AbpMvcAuthorize(<#=_permissionName#>)]
    public partial class <#=name#>Controller : ControllerBase
    {

        private I<#=name#>AppService _<#=_lowername#>AppService;
    
        public <#=name#>Controller(I<#=name#>AppService arg1)
        {
         
            _<#=_lowername#>AppService = arg1;

        }

        public virtual ActionResult  Index(Get<#=name#>Input input)
        {
            ViewData["_Page_Role_"] = <#=_permissionName#>;

            ViewData["_input_"] = input;


            var list = _<#=_lowername#>AppService.GetPageList(input).Total;


            return View(list);
        }


        #region 添加
        [HttpGet][AbpMvcAuthorize(<#=_permissionName#>_Create)]

        public virtual ActionResult Create()
        {
            ViewData["_Page_Role_"] =  <#=_permissionName#>;

            var model = new Create<#=name#>Input();
         
            return View(model);
        }

        [HttpPost]
        [ValidateInput(false)][AbpMvcAuthorize(<#=_permissionName#>_Create)]
        public virtual async Task<JsonResult> CreateData(Create<#=name#>Input input)
        {
            var ajaxResponse = new AjaxResponse { Success = false, Error = new ErrorInfo { Message = "操作失败" } };

            await _<#=_lowername#>AppService.Create(input);

            ajaxResponse.Success = true;
            ajaxResponse.Result = "操作成功";
            ajaxResponse.Error = null;

            return Json(ajaxResponse);
        }

        #endregion

        #region 编辑
        [HttpGet][AbpMvcAuthorize(<#=_permissionName#>_Edit)]
        public virtual async Task<ActionResult> Edit(long id)
        {
            ViewData["_Page_Role_"] = <#=_permissionName#>;
            var model = await  _<#=_lowername#>AppService.GetEditById(id);

            return View(model);
        }


        [HttpPost]
        [ValidateInput(false)][AbpMvcAuthorize(<#=_permissionName#>_Edit)]
        public virtual async Task<JsonResult> EditData(Edit<#=name#>Input input)
        {
            var ajaxResponse = new AjaxResponse { Success = false, Error = new ErrorInfo { Message = "操作失败" } };
            await _<#=_lowername#>AppService.Edit(input);



            ajaxResponse.Success = true;
            ajaxResponse.Result = "操作成功";
            ajaxResponse.Error = null;

            return Json(ajaxResponse);
        }


        #endregion

        #region 删除
        /// <summary>
        /// 单个删除
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        [HttpPost]
        [AbpMvcAuthorize(PermissionNames.<#=_permissionName#>_Delete)]        
        public virtual async Task<ActionResult> Delete(long id)
        {
            var ajaxResponse = new AjaxResponse { Success = false, Error = new ErrorInfo { Message = "操作失败" } };
            try
            {
                await _<#=_lowername#>AppService.Delete(id);

                ajaxResponse.Success = true;
                ajaxResponse.Error = null;
                ajaxResponse.Result = "操作成功";
                ajaxResponse.TargetUrl = "";
            }
            catch
            {
                ajaxResponse.Success = false;
                ajaxResponse.Error.Message = "操作失败";
            }
            return Json(ajaxResponse);
        }


        /// <summary>
        /// 多个删除
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        [HttpPost]
        [AbpMvcAuthorize(PermissionNames.<#=_permissionName#>_Delete)]         
        public virtual async Task<ActionResult> BatchDelete(List<long> ids)
        {
            var ajaxResponse = new AjaxResponse { Success = false, Error = new ErrorInfo { Message = "操作失败" } };
            try
            {
                await _<#=_lowername#>AppService.BatchDeleteAsync(ids);

                ajaxResponse.Success = true;
                ajaxResponse.Error = null;
                ajaxResponse.Result = "操作成功";
                ajaxResponse.TargetUrl = "";
            }
            catch
            {
                ajaxResponse.Success = false;
                ajaxResponse.Error.Message = "操作失败";
            }
            return Json(ajaxResponse);
        }

        #endregion


        #region 导出
        public virtual FileResult Downlaod(Get<#=name#>Input input)
        {
            input.PageSize = int.MaxValue;            
            var listObj = new List<List<object>>();
            List<<#=name#>Dto> list = new List<<#=name#>Dto>();
            list = _<#=_lowername#>AppService.GetPageList(input).Total;


            //表头
            var listTitle = new List<object>();
            listTitle.Add("XXX");
            listTitle.Add("XXX");
            listTitle.Add("XXX");

            listObj.Add(listTitle);

            foreach (var m in list)
            {
                var listInfo = new List<object>();

                listInfo.Add("");
                listInfo.Add("");
                listInfo.Add("");

                listObj.Add(listInfo);
            }


            var execlHelper = new ExcelAccessor();
            byte[] date = execlHelper.ExportToByte(listObj, "xxx信息");
            return File(date, Mime.MIME_XLS, string.Format("xxx-{0}.xls", DateTime.Now.ToString("yyyyMMddhhmmss")));

        }
        #endregion

    }
}