




using System;
using System.Linq;
using System.Threading.Tasks;
using Abp.Application.Services.Dto;
using Abp.AutoMapper;
using Abp.Extensions;
using Abp.Domain.Repositories;
using Webdiyer.WebControls.Mvc;
using WP.Extensions.IQueryable;
using System.Collections.Generic;
using WP.s.Dto;
using Abp.Runtime.Caching;

namespace WP.s
{

 public interface IAppService : WPAppServiceBase, IAppService
    {
        private readonly IRepository<s., long> _Repository;
       
        public ReviewAppService(IRepository<, long> Repository)
        {
            _Repository = Repository;
          
        }

        public List<Dto> GetAll()
        {
            return _Repository.GetAll().OrderByDescending(m => m.CreationTime).ToList().MapTo<List<Dto>>();
        }

        public MvcPagerListResultDto<Dto> GetPageList(GetInput input)
        {
           
            var query = _Repository.GetAll();
            var result = query.OrderBy(input.SortName.IsNullOrWhiteSpace() == true ? "CreationTime" : input.SortName, input.SortDesc.HasValue == false || input.SortDesc == 1).ToPagedList(input.Page ?? 1, input.PageSize ?? WPConsts.DefaultPageSize);

            var rdata = result.ToList().MapTo<List<Dto>>();

            return new MvcPagerListResultDto<Dto>
            {
                Total = new PagedList<Dto>(rdata, result.CurrentPageIndex, result.PageSize, result.TotalItemCount)
            };
        }


        public List<Dto> GetList(List<long> ids)
        {
            return _Repository.GetAll().Where(m => ids.Contains(m.Id)).OrderByDescending(m => m.CreationTime).MapTo<List<ReviewDto>>();
        }

     


        public async Task<Dto> Create(CreateInput Input)
        {
            var entity = Input.MapTo<Review>();

            entity.Id = await _Repository.InsertAndGetIdAsync(entity);

            return entity.MapTo<Dto>();
        }

        public virtual async Task<int> CreateListAsync(List<CreateInput> input)
        {
            var result = 0;
            foreach (var item in input)
            {
                await Create(item);
                result++;


            }
            return result;
        }


        public async Task Del(long Id)
        {
            await _Repository.DeleteAsync(Id);
        }

        public void Delete(long Id)
        {
            _Repository.Delete(Id);
        }

        /// <summary>
        /// ²»´Ó»º´æ
        /// </summary>
        /// <param name="Id"></param>
        /// <returns></returns>
        public async Task<Dto> GetAsyncById(long Id)
        {
            var model = await _Repository.GetAsync(Id);
            return model.MapTo<Dto>();
        }

        public ReviewDto GetById(long Id)
        {
            var model = _Repository.GetAll().FirstOrDefault(m => m.Id == Id).MapTo<Dto>();
            return model.MapTo<Dto>();
        }

        public async Task<EditInput> GetEditById(long Id)
        {
            var model = await _Repository.GetAsync(Id);
            return model.MapTo<EditInput>();
        }

        public async Task<EditDto> GetEditDtoById(long Id)
        {
            var model = await _Repository.GetAsync(Id);
            return model.MapTo<EditDto>();
        }

        public async Task Edit(EditInput Input)
        {
            var entity = await _Repository.GetAsync(Input.Id);

            Input.MapTo(entity);

            await _Repository.UpdateAsync(entity);
        }

  
    }
}
