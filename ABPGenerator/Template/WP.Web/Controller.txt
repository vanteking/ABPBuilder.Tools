



//------------------------------------------------------------------------------
// <auto-generated>
//  此代码由T4模板自动生成
//  生成时间 2021-06-30 15:51:26 
// </auto-generated>
//------------------------------------------------------------------------------

using Abp.Web.Models;
using Abp.Web.Mvc.Authorization;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Web;
using System.Web.Mvc;
using WP.Authorization;
using WP.Common;

using WP.s;
using WP.s.Dto;

namespace WP.Web.Areas.EWebSysMgr.Controllers
{
    [AbpMvcAuthorize()]
    public partial class Controller : ControllerBase
    {

        private IAppService _AppService;
    
        public Controller(IAppService arg1)
        {
         
            _AppService = arg1;

        }

        public virtual ActionResult  Index(GetInput input)
        {
            ViewData["_Page_Role_"] = ;

            ViewData["_input_"] = input;


            var list = _AppService.GetPageList(input).Total;


            return View(list);
        }


        #region 添加
        [HttpGet][AbpMvcAuthorize(_Create)]
        public virtual ActionResult Create()
        {
            ViewData["_Page_Role_"] =  ;

            var model = new CreateInput();
         
            return View(model);
        }

        [HttpPost]
        [ValidateInput(false)][AbpMvcAuthorize(_Create)]
        public virtual async Task<JsonResult> CreateData(CreateInput input)
        {
            var ajaxResponse = new AjaxResponse { Success = false, Error = new ErrorInfo { Message = "操作失败" } };

            await _AppService.Create(input);

            ajaxResponse.Success = true;
            ajaxResponse.Result = "操作成功";
            ajaxResponse.Error = null;

            return Json(ajaxResponse);
        }

        #endregion

        #region 编辑
        [HttpGet][AbpMvcAuthorize(_Edit)]
        public virtual async Task<ActionResult> Edit(long id)
        {
            ViewData["_Page_Role_"] = ;
            var model = await  _AppService.GetEditById(id);

            return View(model);
        }


        [HttpPost]
        [ValidateInput(false)][AbpMvcAuthorize(_Edit)]
        public virtual async Task<JsonResult> EditData(EditInput input)
        {
            var ajaxResponse = new AjaxResponse { Success = false, Error = new ErrorInfo { Message = "操作失败" } };
            await _AppService.Edit(input);



            ajaxResponse.Success = true;
            ajaxResponse.Result = "操作成功";
            ajaxResponse.Error = null;

            return Json(ajaxResponse);
        }


        #endregion

        #region 删除
        /// <summary>
        /// 单个删除
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        [HttpPost]
        [AbpMvcAuthorize(_Delete)]        
        public virtual async Task<ActionResult> Delete(long id)
        {
            var ajaxResponse = new AjaxResponse { Success = false, Error = new ErrorInfo { Message = "操作失败" } };
            try
            {
                await _AppService.Delete(id);

                ajaxResponse.Success = true;
                ajaxResponse.Error = null;
                ajaxResponse.Result = "操作成功";
                ajaxResponse.TargetUrl = "";
            }
            catch
            {
                ajaxResponse.Success = false;
                ajaxResponse.Error.Message = "操作失败";
            }
            return Json(ajaxResponse);
        }


        /// <summary>
        /// 多个删除
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        [HttpPost]
        [AbpMvcAuthorize(_Delete)]         
        public virtual async Task<ActionResult> BatchDelete(List<long> ids)
        {
            var ajaxResponse = new AjaxResponse { Success = false, Error = new ErrorInfo { Message = "操作失败" } };
            try
            {
                await _AppService.BatchDeleteAsync(ids);

                ajaxResponse.Success = true;
                ajaxResponse.Error = null;
                ajaxResponse.Result = "操作成功";
                ajaxResponse.TargetUrl = "";
            }
            catch
            {
                ajaxResponse.Success = false;
                ajaxResponse.Error.Message = "操作失败";
            }
            return Json(ajaxResponse);
        }

        #endregion


        #region 导出
        public virtual FileResult Downlaod(GetInput input)
        {
            input.PageSize = int.MaxValue;            
            var listObj = new List<List<object>>();
            List<Dto> list = new List<Dto>();
            list = _AppService.GetPageList(input).Total;


            //表头
            var listTitle = new List<object>();
            listTitle.Add("XXX");
            listTitle.Add("XXX");
            listTitle.Add("XXX");

            listObj.Add(listTitle);

            foreach (var m in list)
            {
                var listInfo = new List<object>();

                listInfo.Add("");
                listInfo.Add("");
                listInfo.Add("");

                listObj.Add(listInfo);
            }


            var execlHelper = new ExcelAccessor();
            byte[] date = execlHelper.ExportToByte(listObj, "xxx信息");
            return File(date, Mime.MIME_XLS, string.Format("xxx-{0}.xls", DateTime.Now.ToString("yyyyMMddhhmmss")));

        }
        #endregion

    }
}