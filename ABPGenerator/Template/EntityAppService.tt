<#@ template language="C#" debug="true"  #>
<#@ output extension=".txt" #>
<#@ assembly name="System.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ parameter name="classname" type="System.String" #>

<#

var name=(classname == null ? "" : classname);

#>

using System;
using System.Linq;
using System.Threading.Tasks;
using Abp.Application.Services.Dto;
using Abp.AutoMapper;
using Abp.Extensions;
using Abp.Domain.Repositories;
using Webdiyer.WebControls.Mvc;
using WP.Extensions.IQueryable;
using System.Collections.Generic;
using WP.<#=name #>s.Dto;
using Abp.Runtime.Caching;
using Abp.Auditing;

namespace WP.<#=name #>s
{
    [DisableAuditing]
    public class <#=name #>AppService : WPAppServiceBase, I<#=name #>AppService
    {
        private readonly IRepository<<#=name #>s.<#=name #>, long> _<#=name #>Repository;
       
        public <#=name #>AppService(IRepository<<#=name #>, long> <#=name #>Repository)
        {
            _<#=name #>Repository = <#=name #>Repository;
          
        }

        public List<<#=name #>Dto> GetAll()
        {
            return _<#=name #>Repository.GetAll().OrderByDescending(m => m.CreationTime).ToList().MapTo<List<<#=name #>Dto>>();
        }

        public MvcPagerListResultDto<<#=name #>Dto> GetPageList(Get<#=name #>Input input)
        {
           
            var query = _<#=name #>Repository.GetAll();
            var result = query.OrderBy(input.SortName.IsNullOrWhiteSpace() == true ? "CreationTime" : input.SortName, input.SortDesc.HasValue == false || input.SortDesc == 1).ToPagedList(input.Page ?? 1, input.PageSize ?? WPConsts.DefaultPageSize);

            var rdata = result.ToList().MapTo<List<<#=name #>Dto>>();

            return new MvcPagerListResultDto<<#=name #>Dto>
            {
                Total = new PagedList<<#=name #>Dto>(rdata, result.CurrentPageIndex, result.PageSize, result.TotalItemCount)
            };
        }


        public List<<#=name #>Dto> GetList(List<long> ids)
        {
            return _<#=name #>Repository.GetAll().Where(m => ids.Contains(m.Id)).OrderByDescending(m => m.CreationTime).MapTo<List<<#=name #>Dto>>();
        }

     

        [Audited]
        public async Task<<#=name #>Dto> Create(Create<#=name #>Input Input)
        {
            var entity = Input.MapTo<<#=name #>>();

            entity.Id = await _<#=name #>Repository.InsertAndGetIdAsync(entity);

            return entity.MapTo<<#=name #>Dto>();
        }

        public virtual async Task<int> CreateListAsync(List<Create<#=name #>Input> input)
        {
            var result = 0;
            foreach (var item in input)
            {
                await Create(item);
                result++;
            }
            return result;
        }

        [Audited]
        public async Task Delete(long Id)
        {
            await _<#=name #>Repository.DeleteAsync(Id);
        }

        public async Task<<#=name #>Dto> GetById(long Id)
        {
            var model =await  _<#=name #>Repository.FirstOrDefaultAsync(m => m.Id == Id);
            if (model == null) { return null; }
            return model.MapTo<<#=name #>Dto>();
        }

        public async Task<Edit<#=name #>Input> GetEditById(long Id)
        {
            var model = await _<#=name #>Repository.GetAsync(Id);
            return model.MapTo<Edit<#=name #>Input>();
        }

        
        [Audited]
        public async Task Edit(Edit<#=name #>Input Input)
        {
            var entity = await _<#=name #>Repository.GetAsync(Input.Id);

            Input.MapTo(entity);

            await _<#=name #>Repository.UpdateAsync(entity);
        }

        /// <summary>
        /// 批量删除
        /// </summary>
        [Audited]
        public async Task BatchDeleteAsync(List<long> input)
        {
            //TODO:批量删除前的逻辑判断，是否允许删除
            await _<#=name #>Repository.DeleteAsync(s => input.Contains(s.Id));
        }
    }
}
