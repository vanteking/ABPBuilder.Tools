<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JinianNet.JNTemplate</name>
    </assembly>
    <members>
        <member name="T:JinianNet.JNTemplate.Caching.ICache">
            <summary>
            缓存提供者
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Caching.ICache.Count">
            <summary>
            当前缓存数量
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Caching.ICache.Set(System.String,System.Object)">
            <summary>
            添加缓存（自行实现时注意设置默认过期时间）
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:JinianNet.JNTemplate.Caching.ICache.Set(System.String,System.Object,System.TimeSpan)">
            <summary>
            添加缓存
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="expire">过期时间</param>
        </member>
        <member name="M:JinianNet.JNTemplate.Caching.ICache.Get(System.String)">
            <summary>
            获取键为key的缓存
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Caching.ICache.Get``1(System.String)">
            <summary>
            获取缓存并自动转换成指定类型
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Caching.ICache.Remove(System.String)">
            <summary>
            移除键为key的缓存
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Caching.ICache.Clear">
            <summary>
            清空所有缓存
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Caching.MemoryCache">
            <summary>
            内存缓存
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Caching.MemoryCache.#ctor">
            <summary>
            内存缓存
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Caching.MemoryCache.Count">
            <summary>
            当前缓存数量
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Caching.MemoryCache.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Caching.MemoryCache.Get(System.String)">
            <summary>
            获取缓存
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Caching.MemoryCache.GetEnumerator">
            <summary>
            获取Enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Caching.MemoryCache.Remove(System.String)">
            <summary>
            移除缓存
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Caching.MemoryCache.Set(System.String,System.Object)">
            <summary>
            设置缓存
            </summary>
            <param name="key">健</param>
            <param name="value">值</param>
        </member>
        <member name="M:JinianNet.JNTemplate.Caching.MemoryCache.Get``1(System.String)">
            <summary>
            获取缓存并自动转换成指定类型
            </summary>
            <typeparam name="T">返回类型</typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Caching.MemoryCache.Set(System.String,System.Object,System.TimeSpan)">
            <summary>
            添加缓存
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="expire">过期时间</param>
        </member>
        <member name="M:JinianNet.JNTemplate.Caching.MemoryCache.Clear">
            <summary>
            清空所有缓存
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.CharScanner">
            <summary>
            字符扫描器
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.CharScanner.EOF">
            <summary>
            结束字符
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.CharScanner.#ctor(System.String)">
            <summary>
            CharScanner
            </summary>
            <param name="text">扫描内容</param>
        </member>
        <member name="P:JinianNet.JNTemplate.CharScanner.Index">
            <summary>
            当前索引
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.CharScanner.Next">
            <summary>
            前进1个字符
            </summary>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.CharScanner.Next(System.Int32)">
            <summary>
            前进指定介字符
            </summary>
            <param name="i">数目</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.CharScanner.Back">
            <summary>
            后退一个字符
            </summary>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.CharScanner.Back(System.Int32)">
            <summary>
            后退指定字符
            </summary>
            <param name="i">数目</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.CharScanner.Read">
            <summary>
            读取当前字符
            </summary>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.CharScanner.Read(System.Int32)">
            <summary>
            读取当前索引位开始后第i个字符
            </summary>
            <param name="i">数目</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.CharScanner.IsMatch(System.Char[])">
            <summary>
            当前是否匹配指定对象
            </summary>
            <param name="list">匹配对象</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.CharScanner.IsEnd">
            <summary>
            是否扫描结束
            </summary>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.CharScanner.IsMatch(System.Char[],System.Int32)">
            <summary>
            是否匹配指定对象
            </summary>
            <param name="list">匹配对象</param>
            <param name="n">从当前索引后第N位开始</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.CharScanner.GetEscapeString">
            <summary>
            获取当前start到index的字符串(会处理转义符)
            </summary>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.CharScanner.GetString">
            <summary>
            截取start到index的字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.CharScanner.GetEscapeString(System.Int32,System.Int32)">
            <summary>
            截取x到y的转义字符串
            </summary>
            <param name="x">开始索引</param>
            <param name="y">结束索引</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.CharScanner.GetString(System.Int32,System.Int32)">
            <summary>
            截取x到y的字符串
            </summary>
            <param name="x">开始索引</param>
            <param name="y">结束索引</param>
            <returns></returns>
        </member>
        <member name="T:JinianNet.JNTemplate.CompileTemplate">
            <summary>
             Compile Template
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.CompileTemplate.#ctor">
            <summary>
            CompileTemplate
            </summary> 
        </member>
        <member name="M:JinianNet.JNTemplate.CompileTemplate.#ctor(JinianNet.JNTemplate.TemplateContext,System.String)">
            <summary>
            CompileTemplate
            </summary>
            <param name="ctx">TemplateContext 对象</param>
            <param name="text">模板内容</param>
        </member>
        <member name="M:JinianNet.JNTemplate.CompileTemplate.Render(System.IO.TextWriter,JinianNet.JNTemplate.TemplateContext)">
            <summary>
            呈现模板
            </summary>
            <param name="writer">writer</param>
            <param name="context">context</param>
        </member>
        <member name="M:JinianNet.JNTemplate.CompileTemplate.Render(System.IO.TextWriter)">
            <summary>
            呈现内容
            </summary>
            <param name="writer">TextWriter</param>
        </member>
        <member name="T:JinianNet.JNTemplate.Compile.CompileBuilder">
            <summary>
            Compiler
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Compile.CompileBuilder.GenerateDefaultValue``1">
            <summary>
            生成默认值
            </summary>
            <typeparam name="T">Type</typeparam>
            <returns>value</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Compile.CompileBuilder.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Compile.CompileBuilder.CreateRenderMethod``1(JinianNet.JNTemplate.Compile.CompileContext)">
            <summary>
            创建VOID的呈现方法
            </summary>
            <typeparam name="T">ITag</typeparam>
            <param name="ctx">CompileContext</param>
            <returns>MethodBuilder</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Compile.CompileBuilder.CreateRenderMethod(JinianNet.JNTemplate.Compile.CompileContext,System.String)">
            <summary>
            创建VOID的呈现方法
            </summary>
            <param name="name">name</param>
            <param name="ctx">CompileContext</param>
            <returns>MethodBuilder</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Compile.CompileBuilder.CreateReutrnMethod``1(JinianNet.JNTemplate.Compile.CompileContext,System.Type)">
            <summary>
            创建有返回类型的方法
            </summary>
            <typeparam name="T">ITAG</typeparam>
            <param name="ctx">CompileContext</param>
            <param name="returnType">return type</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Compile.CompileBuilder.CreateReutrnMethod(System.Reflection.Emit.TypeBuilder,System.String,System.Type)">
            <summary>
            创建有返回类型的方法
            </summary> 
            <param name="builder">TypeBuilder</param>
            <param name="name">Method name</param>
            <param name="returnType">return type</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Compile.CompileBuilder.ChangeType(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            object to type
            </summary>
            <param name="il">ILGenerator</param>
            <param name="type">目标类型</param>
        </member>
        <member name="M:JinianNet.JNTemplate.Compile.CompileBuilder.GetCompileMethod(JinianNet.JNTemplate.Nodes.ITag,JinianNet.JNTemplate.Compile.CompileContext)">
            <summary>
            获取编译方法
            </summary>
            <param name="tag">标签</param>
            <param name="scope">编译上下文</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Compile.CompileBuilder.GetCompileMethod(System.String,JinianNet.JNTemplate.Nodes.ITag,JinianNet.JNTemplate.Compile.CompileContext)">
            <summary>
            获取编译方法
            </summary>
            <param name="name">方法名</param>
            <param name="tag">标签</param>
            <param name="scope">编译上下文</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Compile.CompileBuilder.Build(JinianNet.JNTemplate.Nodes.ITag)">
            <summary>
            构建一个Render
            </summary>
            <param name="tag">TAG</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Compile.CompileBuilder.Build``1">
            <summary>
            构建一个Render
            </summary>
            <typeparam name="T">ITag</typeparam>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Compile.CompileBuilder.Build(System.String)">
            <summary>
            构建一个Render
            </summary>
            <param name="name">TAG NAME</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Compile.CompileBuilder.SetRenderFunc``1(System.Action{JinianNet.JNTemplate.Nodes.ITag,JinianNet.JNTemplate.Compile.CompileContext})">
            <summary>
            设置Render
            </summary>
            <typeparam name="T">ITag</typeparam>
            <param name="action">action</param>
        </member>
        <member name="M:JinianNet.JNTemplate.Compile.CompileBuilder.SetRenderFunc``1">
            <summary>
            设置Default Render
            </summary>
            <typeparam name="T">ITag</typeparam> 
        </member>
        <member name="M:JinianNet.JNTemplate.Compile.CompileBuilder.SetRenderFunc(System.String,System.Action{JinianNet.JNTemplate.Nodes.ITag,JinianNet.JNTemplate.Compile.CompileContext})">
            <summary>
            设置Render
            </summary>
            <param name="name">tag name</param>
            <param name="action">action</param>
        </member>
        <member name="M:JinianNet.JNTemplate.Compile.CompileBuilder.SetRenderFunc(System.String)">
            <summary>
            设置Default Render
            </summary>
            <param name="name">tag name</param>
        </member>
        <member name="M:JinianNet.JNTemplate.Compile.CompileBuilder.LoadVariable(System.Reflection.Emit.ILGenerator,System.Type,System.Int32)">
            <summary>
            加载变量
            </summary>
            <param name="il">ILGenerator</param>
            <param name="type">Type</param>
            <param name="index">变量所在索引</param>
        </member>
        <member name="M:JinianNet.JNTemplate.Compile.CompileBuilder.Call(System.Reflection.Emit.ILGenerator,System.Type,System.Reflection.MethodInfo)">
            <summary>
            调用方法
            </summary>
            <param name="il"></param>
            <param name="type"></param>
            <param name="method"></param>
        </member>
        <member name="M:JinianNet.JNTemplate.Compile.CompileBuilder.Register``1(System.Func{JinianNet.JNTemplate.Nodes.ITag,JinianNet.JNTemplate.Compile.CompileContext,System.Reflection.MethodInfo})">
            <summary>
            设置编译方法
            </summary>
            <typeparam name="T">ITag</typeparam>
            <param name="func">编译方法</param>
        </member>
        <member name="M:JinianNet.JNTemplate.Compile.CompileBuilder.Register(System.String,System.Func{JinianNet.JNTemplate.Nodes.ITag,JinianNet.JNTemplate.Compile.CompileContext,System.Reflection.MethodInfo})">
            <summary>
            设置编译方法
            </summary>
            <param name="name">标签名</param>
            <param name="func">编译方法</param>
        </member>
        <member name="M:JinianNet.JNTemplate.Compile.CompileBuilder.Initialize">
            <summary>
            初始化编译方法
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Compile.CompileContext">
            <summary>
            Compile Context
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Compile.CompileContext.#ctor">
            <summary>
            ctox
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Compile.CompileContext.Name">
            <summary>
            template name
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Compile.CompileContext.TypeBuilder">
            <summary>
            Type builder
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Compile.CompileContext.Generator">
            <summary>
            IL Generator
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Compile.CompileContext.Data">
            <summary>
            data
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Compile.CompileContext.Set(System.String,System.Type)">
            <summary>
            设置编译参数类型
            </summary>
            <param name="name">key</param>
            <param name="type">type</param>
        </member>
        <member name="M:JinianNet.JNTemplate.Compile.CompileContext.Set``1(System.String)">
            <summary>
            设置编译参数类型
            </summary>
            <param name="name">key</param>
        </member>
        <member name="P:JinianNet.JNTemplate.Compile.CompileContext.Seed">
            <summary>
            seed 
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Compile.Compiler">
            <summary>
            编译
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Compile.Compiler.Builder">
            <summary>
            Compile builder
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Compile.Compiler.TypeGuess">
            <summary>
            Type guess
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Compile.Compiler.#cctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Compile.Compiler.ImplementationProperty(System.Type,System.Reflection.Emit.TypeBuilder,System.String)">
            <summary>
            define property
            </summary>
            <param name="type">base type</param>
            <param name="typeBuilder">type builder</param>
            <param name="name">property name</param>
        </member>
        <member name="M:JinianNet.JNTemplate.Compile.Compiler.DefineObjectFrom(System.Type)">
            <summary>
            define object
            </summary>
            <param name="baseType">base type</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Compile.Compiler.CopyObject(System.Object)">
            <summary>
            copy property
            </summary>
            <param name="value">ori object</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Compile.Compiler.CopyObject(System.Type,System.Object)">
            <summary>
            copy property
            </summary>
            <param name="baseType">type</param>
            <param name="value">ori object</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Compile.Compiler.GenerateContext(System.String)">
            <summary>
            Generate Context
            </summary>
            <param name="name">template name</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Compile.Compiler.DefineType(System.Type,System.Type,System.String,System.String)">
            <summary>
            Define Type
            </summary>
            <param name="interfaceType">interface</param>
            <param name="parent">parent</param>
            <param name="assemblyName">assembly Name</param>
            <param name="className">class Name</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Compile.Compiler.GenerateContext(System.String,JinianNet.JNTemplate.VariableScope)">
            <summary>
            Generate Context
            </summary>
            <param name="name">template name</param>
            <param name="scope">data</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Compile.Compiler.Compile(JinianNet.JNTemplate.Nodes.ITag[],JinianNet.JNTemplate.Compile.CompileContext)">
            <summary>
            Compile tag
            </summary>
            <param name="tags">tag</param>
            <param name="ctx">Context</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Compile.Compiler.Compile(System.String,System.String,System.Action{JinianNet.JNTemplate.Compile.CompileContext})">
            <summary>
            Compile content
            </summary>
            <param name="content">content</param>
            <param name="name">template name</param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Compile.Compiler.Compile(System.String,JinianNet.JNTemplate.Compile.CompileContext)">
            <summary>
            Compile content
            </summary>
            <param name="content">content</param>
            <param name="ctx">Context</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Compile.Compiler.ToHashCode(System.String)">
            <summary>
            获取HASHCODE
            </summary>
            <param name="name">名称</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Compile.Compiler.Register``1(System.Func{JinianNet.JNTemplate.Nodes.ITag,JinianNet.JNTemplate.Compile.CompileContext,System.Reflection.MethodInfo},System.Func{JinianNet.JNTemplate.Nodes.ITag,JinianNet.JNTemplate.Compile.CompileContext,System.Type})">
            <summary>
            Register tag
            </summary>
            <typeparam name="T">ITag</typeparam> 
            <param name="compile"></param>
            <param name="guess"></param>
        </member>
        <member name="T:JinianNet.JNTemplate.Compile.CompileTemplateBase">
            <summary>
            CompileTemplate
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Compile.CompileTemplateBase.Render(System.IO.TextWriter,JinianNet.JNTemplate.TemplateContext)">
            <summary>
            呈现模板
            </summary>
            <param name="writer">TextWriter</param>
            <param name="context">Template Context</param>
        </member>
        <member name="M:JinianNet.JNTemplate.Compile.CompileTemplateBase.Render(System.IO.TextWriter)">
            <summary>
            呈现模板
            </summary>
            <param name="writer">TextWriter</param>
        </member>
        <member name="T:JinianNet.JNTemplate.Compile.EmptyCompileTemplate">
            <summary>
            空模板
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Compile.EmptyCompileTemplate.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Compile.EmptyCompileTemplate.#ctor(System.String)">
            <summary>
            ctor
            </summary>
            <param name="message">要输出的信息</param>
        </member>
        <member name="M:JinianNet.JNTemplate.Compile.EmptyCompileTemplate.Render(System.IO.TextWriter,JinianNet.JNTemplate.TemplateContext)">
            <summary>
            Render
            </summary>
            <param name="writer">writer</param>
            <param name="context">context</param>
        </member>
        <member name="T:JinianNet.JNTemplate.Compile.ICompileTemplate">
            <summary>
            Compile Template
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Compile.ICompileTemplate.Render(System.IO.TextWriter,JinianNet.JNTemplate.TemplateContext)">
            <summary>
            Render
            </summary>
            <param name="writer">TextWriter</param>
            <param name="context">Template Context</param>
        </member>
        <member name="T:JinianNet.JNTemplate.Compile.TypeGuess">
            <summary>
            Type Guess
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Compile.TypeGuess.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Compile.TypeGuess.Initialize">
            <summary>
            Initialize
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Compile.TypeGuess.Register``1(System.Func{JinianNet.JNTemplate.Nodes.ITag,JinianNet.JNTemplate.Compile.CompileContext,System.Type})">
            <summary>
            添加一个判断方法
            </summary>
            <typeparam name="T">标签类型</typeparam>
            <param name="func">判断方法</param>
        </member>
        <member name="M:JinianNet.JNTemplate.Compile.TypeGuess.Register(System.String,System.Func{JinianNet.JNTemplate.Nodes.ITag,JinianNet.JNTemplate.Compile.CompileContext,System.Type})">
            <summary>
            添加一个判断方法
            </summary>
            <param name="name">标签名称</param>
            <param name="func">判断方法</param>
        </member>
        <member name="M:JinianNet.JNTemplate.Compile.TypeGuess.GetType(JinianNet.JNTemplate.Nodes.ITag,JinianNet.JNTemplate.Compile.CompileContext)">
            <summary>
            根据标签获取标签结果类型
            </summary>
            <param name="tag">标签</param>
            <param name="ctx">编译上下文</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Compile.TypeGuess.GetType(System.String,JinianNet.JNTemplate.Nodes.ITag,JinianNet.JNTemplate.Compile.CompileContext)">
            <summary>
            根据标签获取标签结果类型
            </summary>
            <param name="name">标签名称</param>
            <param name="tag">标签</param>
            <param name="ctx">编译上下文</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Compile.TypeGuess.InferChildType(System.Type)">
            <summary>
            获取数组或者泛型的子类型
            </summary>
            <param name="type">父类型</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Compile.TypeGuess.GetTypeLevel(System.Type)">
            <summary>
            获取优先级
            </summary>
            <param name="type">TYPE</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Compile.TypeGuess.IsMinZero(System.Type)">
            <summary>
            是否无符号类型
            </summary>
            <param name="type">TYPE</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Compile.TypeGuess.ChangeType(System.Type)">
            <summary>
            无符号类型转换成对应的有符号类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Compile.TypeGuess.ChoiceType(System.Type,System.Type)">
            <summary>
            选择最优类型
            </summary>
            <param name="x">类型1</param>
            <param name="y">类型2</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Compile.TypeGuess.FindBestType(System.Type[])">
            <summary>
            查找最匹配的类型
            </summary>
            <param name="types">type array</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Compile.TypeGuess.IsPrimitive(System.Type)">
            <summary>
            是否基元类型
            </summary>
            <param name="type">Type</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Compile.TypeGuess.IsNumber(System.Type)">
            <summary>
            是否是系统定义的数字类型
            </summary>
            <param name="type">Type</param>
            <returns></returns>
        </member>
        <member name="T:JinianNet.JNTemplate.Configuration.ConfigExtensions">
            <summary>
            配置扩展类
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Configuration.ConfigExtensions.ToDictionary(JinianNet.JNTemplate.Configuration.IConfig)">
            <summary>
            将符合要求的配置转换为引擎环境变量
            </summary>
            <param name="config">config</param>
            <returns></returns>
        </member>
        <member name="T:JinianNet.JNTemplate.Configuration.EngineConfig">
            <summary>
            模板配置
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Configuration.EngineConfig.ResourceDirectories">
            <summary>
            资源路径
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Configuration.EngineConfig.Charset">
            <summary>
            字符编码
            </summary> 
        </member>
        <member name="P:JinianNet.JNTemplate.Configuration.EngineConfig.TagPrefix">
            <summary>
            标签前缀
            </summary> 
        </member>
        <member name="P:JinianNet.JNTemplate.Configuration.EngineConfig.TagSuffix">
            <summary>
            标签后缀
            </summary> 
        </member>
        <member name="P:JinianNet.JNTemplate.Configuration.EngineConfig.TagFlag">
            <summary>
            简写标签前缀
            </summary> 
        </member>
        <member name="P:JinianNet.JNTemplate.Configuration.EngineConfig.ThrowExceptions">
            <summary>
            是否抛出异常
            </summary> 
        </member>
        <member name="P:JinianNet.JNTemplate.Configuration.EngineConfig.StripWhiteSpace">
            <summary>
            是否处理标签前后空白字符
            </summary> 
        </member>
        <member name="P:JinianNet.JNTemplate.Configuration.EngineConfig.EnableTemplateCache">
            <summary>
            是否缓存模板文件
            </summary> 
        </member>
        <member name="P:JinianNet.JNTemplate.Configuration.EngineConfig.IgnoreCase">
            <summary>
            是否忽略大小写
            </summary> 
        </member>
        <member name="P:JinianNet.JNTemplate.Configuration.EngineConfig.DisableeLogogram">
            <summary>
            是否禁用简写标签 
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Configuration.EngineConfig.Loader">
            <summary>
            加载提供器
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Configuration.EngineConfig.TagParsers">
            <summary>
            标签分析器
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Configuration.EngineConfig.CreateDefault">
            <summary>
            创建默认配置
            </summary>
            <returns></returns>
        </member>
        <member name="T:JinianNet.JNTemplate.Configuration.IConfig">
            <summary>
            配置
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Configuration.IConfig.ResourceDirectories">
            <summary>
            资源路径
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Configuration.IConfig.Charset">
            <summary>
            字符编码
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Configuration.IConfig.TagPrefix">
            <summary>
            标签前缀
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Configuration.IConfig.TagSuffix">
            <summary>
            标签后缀
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Configuration.IConfig.TagFlag">
            <summary>
            简写标签前缀
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Configuration.IConfig.ThrowExceptions">
            <summary>
            是否抛出异常
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Configuration.IConfig.StripWhiteSpace">
            <summary>
            是否处理标签前后空白字符
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Configuration.IConfig.IgnoreCase">
            <summary>
            是否忽略大小写
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Configuration.IConfig.EnableTemplateCache">
            <summary>
            是否缓存模板文件
            </summary> 
        </member>
        <member name="P:JinianNet.JNTemplate.Configuration.IConfig.DisableeLogogram">
            <summary>
            是否禁用简写标签 
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Configuration.IConfig.Loader">
            <summary>
            加载提供器
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Configuration.IConfig.TagParsers">
            <summary>
            标签分析器
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Configuration.PropertyAttribute">
            <summary>
            配置属性
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Configuration.PropertyAttribute.Name">
            <summary>
            对应名称
            </summary>
            <value></value>
        </member>
        <member name="M:JinianNet.JNTemplate.Configuration.PropertyAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Configuration.PropertyAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="name">名称</param>
        </member>
        <member name="T:JinianNet.JNTemplate.Configuration.VariableAttribute">
            <summary>
            环境变量配置属性
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Configuration.VariableAttribute.Name">
            <summary>
            对应名称
            </summary>
            <value></value>
        </member>
        <member name="P:JinianNet.JNTemplate.Configuration.VariableAttribute.Type">
            <summary>
            变量类型
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Configuration.VariableAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Configuration.VariableAttribute.#ctor(System.String,JinianNet.JNTemplate.Configuration.VariableType)">
            <summary>
            构造函数
            </summary>
            <param name="name">名称</param>
            <param name="type">类型</param>
        </member>
        <member name="T:JinianNet.JNTemplate.Configuration.VariableType">
            <summary>
            变量类型
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.Configuration.VariableType.None">
            <summary>
            无
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.Configuration.VariableType.Environment">
            <summary>
            环境变量（会保存在引擎环境变量中，随时读取）
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.Configuration.VariableType.System">
            <summary>
            系统变量（系统特殊属性，需要用户在代码中自行进行处理）
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Context">
            <summary>
            Context
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Context.#ctor">
            <summary>
            上下文
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Context.StripWhiteSpace">
            <summary>
            处理标签前后空格
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Context.CurrentPath">
            <summary>
            当前资源路径
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Context.Charset">
            <summary>
            当前资源编码
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Context.ThrowExceptions">
            <summary>
            是否抛出异常(默认为true)
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Context.ResourceDirectories">
            <summary>
            模板资源搜索目录
            </summary>
            <value></value>
        </member>
        <member name="T:JinianNet.JNTemplate.Dynamic.CallIndexValueDelegate">
            <summary>
            获取索引值
            </summary>
            <param name="container">对象</param>
            <param name="index">索引值</param>
            <returns>返回结果</returns>
        </member>
        <member name="T:JinianNet.JNTemplate.Dynamic.CallPropertyOrFieldDelegate">
            <summary>
            获取属性（包括有参属性）或字段委托
            </summary>
            <param name="model">对象</param>
            <param name="propertyName">属性名称</param>
            <returns>返回结果</returns>
        </member>
        <member name="T:JinianNet.JNTemplate.Dynamic.DynamicHelpers">
            <summary>
            反射HELPERS
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.DynamicHelpers.GetPropertyInfo(System.Type,System.String)">
            <summary>
            获取属性
            </summary>
            <param name="type">类型</param>
            <param name="propName">属性名称</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.DynamicHelpers.GetPropertyGetMethod(System.Type,System.String)">
            <summary>
            获取属性的GET方法
            </summary>
            <param name="type">类型</param>
            <param name="propName">属性名称</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.DynamicHelpers.GetFieldInfo(System.Type,System.String)">
            <summary>
            获取字段
            </summary>
            <param name="type">类型</param>
            <param name="propName">属性名称</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.DynamicHelpers.GetCacheMethods(System.Type,System.String)">
            <summary>
            根据方法名查找方法(缓存)
            </summary>
            <param name="type">类型</param>
            <param name="methodName">方法名</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.DynamicHelpers.GetMethods(System.Type,System.String)">
            <summary>
            根据方法名查找方法（无缓存）
            </summary>
            <param name="type">类型</param>
            <param name="methodName">方法名</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.DynamicHelpers.GetMethod(System.Type,System.String,System.Type[])">
            <summary>
            根据参数获取方法（请避免使用重载）
            </summary>
            <param name="type">类型</param>
            <param name="methodName">方法名</param>
            <param name="args">实参</param>
            <returns>MethodInfo</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.DynamicHelpers.GetGenericMethod(System.Type,System.Type[],System.String,System.Type[])">
            <summary>
            根据参数获取方法（请避免使用重载）
            </summary>
            <param name="type">类型</param>
            <param name="genericType">类型</param>
            <param name="methodName">方法名</param>
            <param name="args">实参</param>
            <returns>MethodInfo</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.DynamicHelpers.GetDynamicMethod(System.String,JinianNet.JNTemplate.Dynamic.DynamicMethodInfo[],System.Type[])">
            <summary>
            根据参数获取动态方法（请尽量避免使用重载）
            </summary>
            <param name="ms">动态方法数组</param>
            <param name="methodName">方法名</param>
            <param name="args">实参</param>
            <returns>MethodInfo</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.DynamicHelpers.IsMatch(System.Reflection.ParameterInfo[],System.Type[],System.Boolean)">
            <summary>
            实参是否匹配形参
            </summary>
            <param name="pi">形参</param>
            <param name="args">实参</param>
            <param name="isAllMatch">参数类型是否完全一致</param>
            <returns>bool</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.DynamicHelpers.IsMatch(System.Reflection.ParameterInfo[],System.Type[])">
            <summary>
            实参是否匹配形参
            </summary>
            <param name="pi">形参</param>
            <param name="args">实参</param>
            <returns>bool</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.DynamicHelpers.IsMatchType(System.Type,System.Type)">
            <summary>
            
            </summary>
            <param name="original"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.DynamicHelpers.CanChange(System.Type,System.Type)">
            <summary>
            原始类型是否可以向目标类型转换
            </summary>
            <param name="original">原始类型</param>
            <param name="target">目标类型</param>
            <returns>bool</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.DynamicHelpers.DefaultForType(System.Type)">
            <summary>
            获取类型默认值
            </summary>
            <param name="targetType"></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.DynamicHelpers.ChangeParameters(System.Collections.Generic.Dictionary{System.Object,System.Object},System.Reflection.ParameterInfo[])">
            <summary>
            参数转换
            </summary>
            <param name="dict">数据</param>
            <param name="pis">参数</param>
            <returns>object[]</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.DynamicHelpers.CreateInstance``1(System.String)">
            <summary>
            创建实例 
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="typeName">类型</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.DynamicHelpers.CreateInstance``1(System.Type)">
            <summary>
            创建实例 
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.DynamicHelpers.CreateInstance(System.Type)">
            <summary>
            创建实例 
            </summary>
            <param name="type">类型</param>
            <returns>实例对象</returns>
        </member>
        <member name="T:JinianNet.JNTemplate.Dynamic.DynamicMethodInfo">
            <summary>
            动态方法信息
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Dynamic.DynamicMethodInfo.Delegate">
            <summary>
            执行方法委托
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Dynamic.DynamicMethodInfo.Parameters">
            <summary>
            形参
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Dynamic.DynamicMethodInfo.Name">
            <summary>
            方法名称
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Dynamic.DynamicMethodInfo.FullName">
            <summary>
            方法完整名称
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Dynamic.DynamicMethodInfo.IsMatchParameters">
            <summary>
            形参实参是否匹配
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Dynamic.ExcuteMethodDelegate">
            <summary>
            动态执行方法委托
            </summary>
            <param name="container">对象</param>
            <param name="args">参数</param>
            <returns>返回结果（Void返回NULL）</returns>
        </member>
        <member name="T:JinianNet.JNTemplate.Dynamic.ExecuteBuilder">
            <summary>
            
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ExecuteBuilder.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ExecuteBuilder.Build(JinianNet.JNTemplate.Nodes.ITag)">
            <summary>
            构建一个Render
            </summary>
            <param name="tag">TAG</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ExecuteBuilder.Build``1">
            <summary>
            构建一个Render
            </summary>
            <typeparam name="T">ITag</typeparam>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ExecuteBuilder.Build(System.String)">
            <summary>
            构建一个Render
            </summary>
            <param name="name">TAG NAME</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ExecuteBuilder.Register``1(System.Func{JinianNet.JNTemplate.Nodes.ITag,JinianNet.JNTemplate.TemplateContext,System.Object})">
            <summary>
            设置Render
            </summary>
            <typeparam name="T">ITag</typeparam>
            <param name="func">func</param>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ExecuteBuilder.Register(System.String,System.Func{JinianNet.JNTemplate.Nodes.ITag,JinianNet.JNTemplate.TemplateContext,System.Object})">
            <summary>
            设置Render
            </summary>
            <param name="name">tag name</param>
            <param name="func">action</param>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ExecuteBuilder.Eval(System.Collections.Generic.List{System.Object},System.Boolean,System.Object)">
            <summary>
            计算
            </summary>
            <param name="list">list</param>
            <param name="isOperator">是否操作符</param>
            <param name="value">标签值</param>
            <returns>是否是最终结果</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ExecuteBuilder.Initialize">
            <summary>
            初始化
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Dynamic.Executor">
            <summary>
            
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Dynamic.Executor.Builder">
            <summary>
            Compile builder
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.Executor.#cctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.Executor.Exec(JinianNet.JNTemplate.Nodes.ITag,JinianNet.JNTemplate.TemplateContext)">
            <summary>
            
            </summary>
            <param name="tag"></param>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.Executor.Parse(System.String,JinianNet.JNTemplate.Nodes.ITag,JinianNet.JNTemplate.TemplateContext)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="tag"></param>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.Executor.Register``1(System.Func{JinianNet.JNTemplate.Nodes.ITag,JinianNet.JNTemplate.TemplateContext,System.Object})">
            <summary>
            注册执行方法
            </summary>
            <typeparam name="T">ITag</typeparam>
            <param name="func">func</param>
        </member>
        <member name="T:JinianNet.JNTemplate.Dynamic.ExpressionEvaluator">
            <summary>
            计算器
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Dynamic.ExpressionEvaluator.LetterType">
            <summary>
            字符类型
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.Dynamic.ExpressionEvaluator.LetterType.None">
            <summary>
            无
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.Dynamic.ExpressionEvaluator.LetterType.Operator">
            <summary>
            操作符
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.Dynamic.ExpressionEvaluator.LetterType.LeftParentheses">
            <summary>
            左圆括号
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.Dynamic.ExpressionEvaluator.LetterType.RightParentheses">
            <summary>
            右中括号
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.Dynamic.ExpressionEvaluator.LetterType.Number">
            <summary>
            数字
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.Dynamic.ExpressionEvaluator.LetterType.Other">
            <summary>
            其它
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ExpressionEvaluator.ProcessExpression(System.String)">
            <summary>
            处理表达式
            </summary>
            <param name="value">表达式</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ExpressionEvaluator.ProcessExpression(System.Object[])">
            <summary>
            处理表达式
            </summary>
            <param name="value">表达式</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ExpressionEvaluator.GetType(System.Object)">
            <summary>
            获取类型
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ExpressionEvaluator.Calculate(System.Object,System.Object,System.String)">
            <summary>
            计算结果
            </summary>
            <param name="x">值一</param>
            <param name="y">值二</param>
            <param name="value">操作符</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ExpressionEvaluator.Calculate(System.Collections.Generic.Stack{System.Object})">
            <summary>
            计算后缀表达式
            </summary>
            <param name="value">后缀表达式</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ExpressionEvaluator.Calculate(System.Object[])">
            <summary>
            计算表达式
            </summary>
            <param name="value">表达式</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ExpressionEvaluator.Calculate(System.String)">
            <summary>
            计算表达式
            </summary>
            <param name="value">表达式</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ExpressionEvaluator.Calculate(System.Boolean,System.Boolean,System.String)">
            <summary>
            计算结果
            </summary>
            <param name="x">值一</param>
            <param name="y">值二</param>
            <param name="value">操作符</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ExpressionEvaluator.Calculate(System.String,System.String,System.String)">
            <summary>
            计算结果
            </summary>
            <param name="x">值一</param>
            <param name="y">值二</param>
            <param name="value">操作符</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ExpressionEvaluator.Calculate(System.DateTime,System.DateTime,System.String)">
            <summary>
            计算结果
            </summary>
            <param name="x">值一</param>
            <param name="y">值二</param>
            <param name="value">操作符</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ExpressionEvaluator.Calculate(System.Double,System.Double,System.String)">
            <summary>
            计算结果
            </summary>
            <param name="x">值一</param>
            <param name="y">值二</param>
            <param name="value">操作符</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ExpressionEvaluator.Calculate(System.Single,System.Single,System.String)">
            <summary>
            计算结果
            </summary>
            <param name="x">值一</param>
            <param name="y">值二</param>
            <param name="value">操作符</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ExpressionEvaluator.Calculate(System.Decimal,System.Decimal,System.String)">
            <summary>
            计算结果
            </summary>
            <param name="x">值一</param>
            <param name="y">值二</param>
            <param name="value">操作符</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ExpressionEvaluator.Calculate(System.Int32,System.Int32,System.String)">
            <summary>
            计算结果
            </summary>
            <param name="x">值一</param>
            <param name="y">值二</param>
            <param name="value">操作符</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ExpressionEvaluator.Calculate(System.Int64,System.Int64,System.String)">
            <summary>
            计算结果
            </summary>
            <param name="x">值一</param>
            <param name="y">值二</param>
            <param name="value">操作符</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ExpressionEvaluator.Calculate(System.Int16,System.Int16,System.String)">
            <summary>
            计算结果
            </summary>
            <param name="x">值一</param>
            <param name="y">值二</param>
            <param name="value">操作符</param>
            <returns></returns>
        </member>
        <member name="T:JinianNet.JNTemplate.Dynamic.IActuator">
            <summary>
            执行Provider
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.IActuator.CallMethod(System.Object,System.String,System.Object[])">
            <summary>
            动态执行方法
            </summary>
            <param name="container">对象</param>
            <param name="methodName">方法名</param>
            <param name="args">实参</param>
            <returns>执行结果（Void返回NULL）</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.IActuator.CallPropertyOrField(System.Object,System.String)">
            <summary>
            动态获取属性或字段
            </summary>
            <param name="value">对象</param>
            <param name="propertyName">属性或字段名</param>
            <returns>返回结果</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.IActuator.CallIndexValue(System.Object,System.Object)">
            <summary>
            动态获取索引值
            </summary>
            <param name="value">对象</param>
            <param name="index">索引</param>
            <returns>返回结果</returns>
        </member>
        <member name="T:JinianNet.JNTemplate.Dynamic.ILActuator">
            <summary>
            IL操作类
            注：本类并非最终版本，请勿使用本类
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ILActuator.#ctor(JinianNet.JNTemplate.Caching.ICache)">
            <summary>
            
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ILActuator.CallPropertyOrField(System.Object,System.String)">
            <summary>
            获取属性或字段
            </summary>
            <param name="value"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ILActuator.CallIndexValue(System.Object,System.Object)">
            <summary>
            动态获取索引值
            </summary>
            <param name="container">对象</param>
            <param name="index">索引</param>
            <returns>返回结果</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ILActuator.CallMethod(System.Object,System.String,System.Object[])">
            <summary>
            执行方法
            </summary>
            <param name="container">对象</param>
            <param name="methodName">方法名</param>
            <param name="args">实参</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ILActuator.Ldloc(System.Type,System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>
            加载局部变量
            </summary>
            <param name="type"></param>
            <param name="il"></param>
            <param name="index"></param>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ILActuator.Ldarg(System.Type,System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>
            加载参数
            </summary>
            <param name="type"></param>
            <param name="il"></param>
            <param name="index"></param>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ILActuator.Call(System.Type,System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo)">
            <summary>
            调用方法
            </summary>
            <param name="type"></param>
            <param name="il"></param>
            <param name="mi"></param>
        </member>
        <member name="T:JinianNet.JNTemplate.Dynamic.OperatorConvert">
            <summary>
            操作符处理类
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.OperatorConvert.ToString(JinianNet.JNTemplate.Operator)">
            <summary>
            将枚举的操作符转换为字符串形式
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.OperatorConvert.Parse(System.String)">
            <summary>
            将操作符转换为枚举形式
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:JinianNet.JNTemplate.Dynamic.ReflectionActuator">
            <summary>
            反射辅助类
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ReflectionActuator.#ctor">
            <summary>
            反射构造函数
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ReflectionActuator.GetIndexedProperty(System.Object,System.Boolean,System.Object)">
            <summary>
            获取索引值
            </summary>
            <param name="container">对象</param>
            <param name="propIndex">索引名称</param>
            <param name="isNumber">索引名称是否数字</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ReflectionActuator.CallPropertyOrField(System.Object,System.String)">
            <summary>
            获取属性或字段的值
            </summary>
            <param name="container">原对象</param>
            <param name="propName">属性或字段名，有参数属性为参数值</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ReflectionActuator.CallIndexValue(System.Object,System.Object)">
            <summary>
            动态获取索引值
            </summary>
            <param name="container">对象</param>
            <param name="propIndex">索引</param>
            <returns>返回结果</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ReflectionActuator.Eval(System.Object,System.String,System.String)">
            <summary>
            执行表达式
            </summary>
            <param name="container">对象</param>
            <param name="expression">表达式</param>
            <param name="format">格式化对象</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ReflectionActuator.Eval(System.Object,System.String)">
            <summary>
            执行表达式
            </summary>
            <param name="container">对象</param>
            <param name="expression">表达式</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ReflectionActuator.Eval(System.Object,System.String[])">
            <summary>
            执行表达式
            </summary>
            <param name="container">对象</param>
            <param name="expressionParts">表达式集合</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ReflectionActuator.Eval(System.Object,System.String[],System.Int32,System.Int32)">
            <summary>
            执行表达式
            </summary>
            <param name="container">对像</param>
            <param name="expressionParts">表达式</param>
            <param name="start">开始索引</param>
            <param name="end">结束索引</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Dynamic.ReflectionActuator.CallMethod(System.Object,System.String,System.Object[])">
            <summary>
            调用实例方法
            </summary>
            <param name="container">实例对象</param>
            <param name="methodName">方法名</param>
            <param name="args">形参</param>
            <returns>object</returns>
        </member>
        <member name="T:JinianNet.JNTemplate.Engine">
            <summary>
            引擎入口
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Engine.Version">
            <summary>
            Version
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Engine.EnableCompile">
            <summary>
            是否启用编译模式
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Engine.Configure(System.Action{JinianNet.JNTemplate.Configuration.IConfig})">
            <summary>
            引擎配置
            </summary>
            <param name="action">配置内容</param>
        </member>
        <member name="M:JinianNet.JNTemplate.Engine.Configure(System.Action{JinianNet.JNTemplate.Configuration.IConfig,JinianNet.JNTemplate.VariableScope})">
            <summary>
            引擎配置
            </summary>
            <param name="action">配置内容</param>
        </member>
        <member name="M:JinianNet.JNTemplate.Engine.Configure(JinianNet.JNTemplate.Configuration.IConfig)">
            <summary>
            引擎配置
            </summary>
            <param name="conf">配置内容</param>
        </member>
        <member name="M:JinianNet.JNTemplate.Engine.Configure(JinianNet.JNTemplate.Configuration.IConfig,JinianNet.JNTemplate.VariableScope)">
            <summary>
            引擎配置
            </summary>
            <param name="conf">配置内容</param>
            <param name="scope">初始数据</param>
        </member>
        <member name="M:JinianNet.JNTemplate.Engine.Configure(System.Collections.Generic.IDictionary{System.String,System.String},JinianNet.JNTemplate.VariableScope)">
            <summary>
            引擎配置
            </summary>
            <param name="conf">配置内容</param>
            <param name="scope">初始数据</param>
        </member>
        <member name="M:JinianNet.JNTemplate.Engine.CompileFile(System.String,System.String,System.Action{JinianNet.JNTemplate.Compile.CompileContext})">
            <summary>
            预编译模板
            </summary>
            <param name="name">模板名称 必须唯一，建议使用模板文件绝对路径</param>
            <param name="fileName">模板路径</param>
            <param name="action">ACTION</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Engine.CompileFileAndExec(System.String,JinianNet.JNTemplate.TemplateContext)">
            <summary>
            编译并执行模板
            </summary>
            <param name="fileName">模板路径</param>
            <param name="ctx">TemplateContext</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Engine.Compile(System.String,System.String,System.Action{JinianNet.JNTemplate.Compile.CompileContext})">
            <summary>
            预编译模板
            </summary>
            <param name="name">模板名称 必须唯一，建议使用模板文件绝对路径</param>
            <param name="content">模板内容 </param>
            <param name="action">ACTION</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Engine.CompileFile(System.IO.FileInfo[],System.Action{JinianNet.JNTemplate.Compile.CompileContext})">
            <summary>
            预编译模板
            </summary> 
            <param name="fs">模板文件</param>
            <param name="action">action</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Engine.CreateContext">
            <summary>
            创建模板上下文
            </summary>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Engine.CreateTemplate(System.String)">
            <summary>
            从指定模板内容创建Template实例
            </summary>
            <param name="text">文本</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Engine.CreateTemplate(System.String,System.String)">
            <summary>
            从指定模板内容创建Template实例
            </summary>
            <param name="name">模板名称 必须唯一</param>
            <param name="text">文本</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Engine.LoadTemplate(System.String)">
            <summary>
            从指定路径加载模板
            </summary>
            <param name="fileName">模板文件</param>
            <returns>ITemplate</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Engine.LoadTemplate(System.String,System.String)">
            <summary>
            从指定路径加载模板
            </summary>
            <param name="name">模板名称 必须唯一</param>
            <param name="fileName">模板文件</param>
            <returns>ITemplate</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Engine.LoadCompileTemplate(System.String,System.String)">
            <summary>
            从指定路径加载模板
            </summary>
            <param name="name">模板名称 必须唯一</param>
            <param name="fileName">模板文件</param> 
            <returns>ITemplate</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Engine.LoadTemplate``1(System.String,System.String,JinianNet.JNTemplate.TemplateContext)">
            <summary>
            从指定路径加载模板
            </summary>
            <param name="name">模板名称 必须唯一</param>
            <param name="fileName">模板文件</param>
            <param name="ctx">模板上下文</param>
            <returns>ITemplate</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Engine.Register``1(JinianNet.JNTemplate.Parsers.ITagParser,System.Func{JinianNet.JNTemplate.Nodes.ITag,JinianNet.JNTemplate.Compile.CompileContext,System.Reflection.MethodInfo},System.Func{JinianNet.JNTemplate.Nodes.ITag,JinianNet.JNTemplate.Compile.CompileContext,System.Type})">
            <summary>
            Register tag
            </summary>
            <typeparam name="T"></typeparam>
            <param name="parser"></param>
            <param name="compileFunc"></param>
            <param name="guessFunc"></param>
        </member>
        <member name="M:JinianNet.JNTemplate.Engine.Register``1(JinianNet.JNTemplate.Parsers.ITagParser,System.Func{JinianNet.JNTemplate.Nodes.ITag,JinianNet.JNTemplate.TemplateContext,System.Object})">
            <summary>
            Register tag
            </summary>
            <typeparam name="T"></typeparam>
            <param name="parser"></param>
            <param name="func"></param> 
        </member>
        <member name="T:JinianNet.JNTemplate.Exception.CompileException">
            <summary>
            编译错误
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Exception.CompileException.#ctor(System.Exception)">
            <summary>
            CompileException
            </summary>
            <param name="exception">innexception</param>
        </member>
        <member name="M:JinianNet.JNTemplate.Exception.CompileException.#ctor(System.String)">
            <summary>
            CompileException
            </summary>
            <param name="message">message</param>
        </member>
        <member name="T:JinianNet.JNTemplate.Exception.ParseException">
            <summary>
            分析异常类
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Exception.ParseException.#ctor">
            <summary>
            模板错误
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Exception.ParseException.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            模板错误
            </summary>
            <param name="message">异常信息</param>
            <param name="line">行</param>
            <param name="column">字符</param>
        </member>
        <member name="M:JinianNet.JNTemplate.Exception.ParseException.#ctor(System.String)">
            <summary>
            模板错误
            </summary>
            <param name="message">错误信息</param>
        </member>
        <member name="M:JinianNet.JNTemplate.Exception.ParseException.#ctor(System.String,System.Exception)">
            <summary>
            模板错误
            </summary>
            <param name="message">错误信息</param>
            <param name="innerException">基础信息</param>
        </member>
        <member name="T:JinianNet.JNTemplate.Exception.TemplateException">
            <summary>
            常规性错误
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Exception.TemplateException.Line">
            <summary>
            所在行
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Exception.TemplateException.Column">
            <summary>
            所在字符
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Exception.TemplateException.Code">
            <summary>
            错误代码
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Exception.TemplateException.#ctor">
            <summary>
            模板错误
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Exception.TemplateException.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            模板错误
            </summary>
            <param name="message">异常信息</param>
            <param name="line">行</param>
            <param name="column">字符</param>
        </member>
        <member name="M:JinianNet.JNTemplate.Exception.TemplateException.#ctor(System.String)">
            <summary>
            模板错误
            </summary>
            <param name="message">错误信息</param>
        </member>
        <member name="M:JinianNet.JNTemplate.Exception.TemplateException.#ctor(System.String,System.Exception)">
            <summary>
            模板错误
            </summary>
            <param name="message">错误信息</param>
            <param name="innerException">基础信息</param>
        </member>
        <member name="T:JinianNet.JNTemplate.Executer">
            <summary>
            执行器
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Executer`1">
            <summary>
            泛型执行器
            </summary>
            <typeparam name="T">泛型</typeparam>
        </member>
        <member name="M:JinianNet.JNTemplate.Executer`1.Execute">
            <summary>
            执行结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Executer`1.JinianNet#JNTemplate#IExecuter#Execute">
            <summary>
            执行结果
            </summary>
            <returns></returns>
        </member>
        <member name="T:JinianNet.JNTemplate.Field">
            <summary>
            系统常用字段
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.Field.Version">
            <summary>
            当前程序版本
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.Field.RSEOLVER_TYPES">
            <summary>
            默认标签解析器
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.FlagMode">
            <summary>
            标记模式
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.FlagMode.None">
            <summary>
            无。
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.FlagMode.Logogram">
            <summary>
            简写
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.FlagMode.Full">
            <summary>
            完整
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.FlagMode.Comment">
            <summary>
            注释
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.FuncHandler">
            <summary>
            方法标签委托
            </summary>
            <param name="args">方法参数</param>
            <returns>object</returns>
        </member>
        <member name="T:JinianNet.JNTemplate.IExecuter">
            <summary>
            执行器
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.IExecuter.Execute">
            <summary>
            执行结果
            </summary>
            <returns></returns>
        </member>
        <member name="T:JinianNet.JNTemplate.IExecuter`1">
            <summary>
            泛型执行器
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:JinianNet.JNTemplate.IExecuter`1.Execute">
            <summary>
            执行结果
            </summary>
            <returns></returns>
        </member>
        <member name="T:JinianNet.JNTemplate.ITemplate">
            <summary>
            Template 接口
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.ITemplate.Context">
            <summary>
            模板上下文
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.ITemplate.TemplateKey">
            <summary>
             模板名字
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.ITemplate.TemplateContent">
            <summary>
            模板内容
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.ITemplate.Render(System.IO.TextWriter)">
            <summary>
            结果呈现
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:JinianNet.JNTemplate.ITemplate.Set``1(System.String,``0)">
            <summary>
            设置实例对象
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:JinianNet.JNTemplate.ITemplate.SetStaticType(System.String,System.Type)">
            <summary>
            设置静态对象
            </summary>
            <param name="key">键</param>
            <param name="type">静态类型</param>
        </member>
        <member name="T:JinianNet.JNTemplate.LexerMode">
            <summary>
            表示词法分析模式的枚举值。
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:JinianNet.JNTemplate.LexerMode.None">
            <summary>
            未定义状态。
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.LexerMode.EnterLabel">
            <summary>
            进入标签。
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.LexerMode.LeaveLabel">
            <summary>
            脱离标签。
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.ArithmeticTag">
            <summary>
            算术表达式
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.BasisTag">
            <summary>
            基本标签(ParseResult)
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.BlockTag">
            <summary>
            标签块
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.BlockTag.TemplateKey">
            <summary>
            模板KEY(用于缓存，默认为文路径)
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.BlockTag.TemplateContent">
            <summary>
            模板内容
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.BlockTag.#ctor">
            <summary>
            标签块
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.BlockTag.ReadTags">
            <summary>
            读取取签
            </summary>
            <returns></returns>
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.BodyTag">
            <summary>
            Body标签（配套Layout使用）
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.BooleanTag">
            <summary>
            布尔标签
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.ChildrenTag">
            <summary>
            基本标签(ParseResult)
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.ChildrenTag.Parent">
            <summary>
            父标签
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.CommentTag">
            <summary>
            文本标签
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.CommentTag.ToString">
            <summary>
            获取对象的字符串引用
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.ComplexTag">
            <summary>
            复合标签(Parse)
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.ElseifTag">
            <summary>
            ELSE if 标签
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.ElseifTag.Condition">
            <summary>
            条件
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.ElseTag">
            <summary>
            else标签
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.EndTag">
            <summary>
            结束标签，用于if for等复合标签的结束
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.ForeachTag">
            <summary>
            Foreach标签
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.ForeachTag.Name">
            <summary>
            节点名
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.ForeachTag.Source">
            <summary>
            源对象
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.ForeachTag.ToIEnumerable(System.Object)">
            <summary>
            将对象转换为IEnumerable
            </summary>
            <param name="dataSource">源对象</param>
            <returns>IEnumerable</returns>
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.ForTag">
            <summary>
            FOR标签
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.ForTag.Initial">
            <summary>
            初始标签 
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.ForTag.Condition">
            <summary>
            逻辑标签
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.ForTag.Do">
            <summary>
            Do 
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.FunctaionTag">
            <summary>
            函数（方法）标签
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.FunctaionTag.Name">
            <summary>
            函数
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.IfTag">
            <summary>
            IF标签
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.IncludeTag">
            <summary>
            INCLUDE标签
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.IncludeTag.Path">
            <summary>
            模板路径
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.IndexValueTag">
            <summary>
            索引标签
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.IndexValueTag.Index">
            <summary>
            索引
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.ITag">
            <summary>
            标签接口
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.ITag.Children">
            <summary>
            子标签
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.ITag.AddChild(JinianNet.JNTemplate.Nodes.ITag)">
            <summary>
            添加一个子标签
            </summary>
            <param name="node"></param>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.ITag.FirstToken">
            <summary>
            开始Token
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.ITag.LastToken">
            <summary>
            结束Token
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.JsonTag">
            <summary>
            简单JSON标签
            注意：该标签仅只支持简单的JSON解析
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.JsonTag.#ctor">
            <summary>
            JsonTag
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.JsonTag.Dict">
            <summary>
            集合
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.LayoutTag">
            <summary>
            Layout标签
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.LayoutTag.ReadTags">
            <summary>
            读取取签
            </summary>
            <returns></returns>
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.LoadTag">
            <summary>
            LOAD标签
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.LoadTag.Path">
            <summary>
            模板路径
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.LogicTag">
            <summary>
            逻辑表达式
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.LogicTag.Eval(System.Collections.Generic.List{System.Object},System.Boolean,System.Object)">
            <summary>
            计算
            </summary>
            <param name="list">list</param>
            <param name="isOperator">是否操作符</param>
            <param name="value">标签值</param>
            <returns>是否是最终结果</returns>
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.NullTag">
            <summary>
            空标签
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.NullTag.ToString">
            <summary>
            获取对象的字符串引用
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.NumberTag">
            <summary>
            数字标签
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.OperatorTag">
            <summary>
            Operator tag
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.OperatorTag.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.OperatorTag.#ctor(JinianNet.JNTemplate.Nodes.Token)">
            <summary>
            ctor
            </summary>
            <param name="token">First Token</param>
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.ReferenceTag">
            <summary>
            组合标签
            用于执于复杂的方法或变量
            通常由属性，方法，索引组合，比如
            $User.CreateDate.ToString("yyyy-MM-dd")
            $Db.Query().Result.Count
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.ReferenceTag.Child">
            <summary>
            子标签
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.ReferenceTag.AddChild(JinianNet.JNTemplate.Nodes.ITag)">
            <summary>
            添加子标签
            </summary>
            <param name="node">子标签</param>
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.SetTag">
            <summary>
            赋值标签
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.SetTag.Name">
            <summary>
            变量名
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.SetTag.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.SpecialTag">
            <summary>
            特殊标签
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.StringTag">
            <summary>
            字符串标签
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.Tag">
            <summary>
            标签基类
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.Tag.Children">
            <summary>
            子标签
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.Tag.AddChild(JinianNet.JNTemplate.Nodes.ITag)">
            <summary>
            添加一个子标签
            </summary>
            <param name="node"></param>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.Tag.FirstToken">
            <summary>
            开始Token
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.Tag.LastToken">
            <summary>
            结束Token
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.TextTag">
            <summary>
            文本标签
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.TextTag.Text">
            <summary>
            标签文本
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.TextTag.ToString">
            <summary>
            获取对象的字符串引用
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.Token">
            <summary>
            TOKEN
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.Token.BeginLine">
            <summary>
            开始行
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.Token.BeginColumn">
            <summary>
            开始列
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.Token.EndLine">
            <summary>
            结束行
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.Token.EndColumn">
            <summary>
            结束列
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.Token.Text">
            <summary>
            文本
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.Token.TokenKind">
            <summary>
            TOKEN标记
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.Token.#ctor(JinianNet.JNTemplate.TokenKind,System.String)">
            <summary>
            TOKEN
            </summary>
            <param name="kind"></param>
            <param name="text"></param>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.Token.Next">
            <summary>
            下一个NEXT
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.Token.ToString">
            <summary>
            获取文本值
            </summary>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.Token.CompareTo(JinianNet.JNTemplate.Nodes.Token)">
            <summary>
            比较对象
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.TokenCollection">
            <summary>
            TOKEN集合
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.TokenCollection.#ctor">
            <summary>
            TOKEN集合
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.TokenCollection.#ctor(System.Int32)">
            <summary>
            TOKEN集合
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.TokenCollection.#ctor(System.Collections.Generic.IEnumerable{JinianNet.JNTemplate.Nodes.Token})">
            <summary>
            TOKEN集合
            </summary>
            <param name="collection">集合</param>
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.TokenCollection.#ctor(System.Collections.Generic.IList{JinianNet.JNTemplate.Nodes.Token},System.Int32,System.Int32)">
            <summary>
            TOKEN集合
            </summary>
            <param name="collection"></param>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.TokenCollection.First">
            <summary>
            获取第一个FTOKEN
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.TokenCollection.Last">
            <summary>
            获取最后一个FTOKEN
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.TokenCollection.ToString">
            <summary>
            获取所有TOKEN的字符串值
            </summary>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.TokenCollection.IndexOf(JinianNet.JNTemplate.Nodes.Token)">
            <summary>
            搜索指定的对象，并返回整个集合中第一个匹配项的从零开始的索引。
            </summary>
            <param name="item">要在集合中查找的对象。对于引用类型，该值可以为 null。</param>
            <returns>如果在整个集合中找到 item 的第一个匹配项，则为该项的从零开始的索引；否则为-1</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.TokenCollection.Insert(System.Int32,JinianNet.JNTemplate.Nodes.Token)">
            <summary>
            将元素插入集合的指定索引处。
            </summary>
            <param name="index">从零开始的索引，应在该位置插入 item。</param>
            <param name="item">要插入的对象。对于引用类型，该值可以为 null。</param>
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.TokenCollection.RemoveAt(System.Int32)">
            <summary>
            移除集合的指定索引处的元素。
            </summary>
            <param name="index">要移除的元素的从零开始的索引。</param>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.TokenCollection.Item(System.Int32,System.Int32)">
            <summary>
            获取指定数量的TOKEN
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.TokenCollection.Split(System.Int32,System.Int32,JinianNet.JNTemplate.TokenKind[])">
            <summary>
            分隔TokenCollection
            </summary>
            <param name="start">开始索引</param>
            <param name="end">结束索引</param>
            <param name="kinds">分隔类型</param>
            <returns></returns>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.TokenCollection.Item(System.Int32)">
            <summary>
            获取或设置指定索引的值
            </summary>
            <param name="index">从零开始的索引。</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.TokenCollection.Add(JinianNet.JNTemplate.Nodes.Token)">
            <summary>
            将对象添加到集合的结尾处。
            </summary>
            <param name="item">要添加到集合的末尾处的对象。</param>
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.TokenCollection.Clear">
            <summary>
             从集合中移除所有元素。
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.TokenCollection.Contains(JinianNet.JNTemplate.Nodes.Token)">
            <summary>
            确定某元素是否在集合中。
            </summary>
            <param name="item">要在集合中查找的对象</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.TokenCollection.CopyTo(JinianNet.JNTemplate.Nodes.Token[],System.Int32)">
            <summary>
            将整个集合复制到兼容的一维数组中，从目标数组的指定索引位置开始放置。
            </summary>
            <param name="array"> 作为从集合复制的元素的目标位置的一维Token数组</param>
            <param name="arrayIndex">必须具有从零开始的索引。</param>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.TokenCollection.Count">
            <summary>
            集合的对象
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.TokenCollection.IsReadOnly">
            <summary>
            是否只读集合
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.TokenCollection.Remove(JinianNet.JNTemplate.Nodes.Token)">
            <summary>
             从集合中移除特定对象的第一个匹配项。
            </summary>
            <param name="item">要从集合中移除的对象</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.TokenCollection.GetEnumerator">
            <summary>
            返回循环访问集合的枚举器。
            </summary>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.TokenCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            返回循环访问集合的枚举器。
            </summary>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.TokenCollection.Equals(JinianNet.JNTemplate.Nodes.TokenCollection)">
            <summary>
            比列二个集合是否相同
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.TokenCollection.Equals(System.Object)">
            <summary>
            重载Equals
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Nodes.TokenCollection.GetHashCode">
            <summary>
            计算HASH CODE
            </summary>
            <returns></returns>
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.TypeTag`1">
            <summary>
            基本类型标签
            </summary>
            <typeparam name="T">类型</typeparam>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.TypeTag`1.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Nodes.VariableTag">
            <summary>
            变量标签(ParseResult)
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Nodes.VariableTag.Name">
            <summary>
            变量名
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Operator">
            <summary>
            操作符
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.Operator.None">
            <summary>
            <![CDATA[none]]>
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.Operator.Add">
            <summary>
            <![CDATA[+]]>
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.Operator.Subtract">
            <summary>
            <![CDATA[-]]>
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.Operator.Multiply">
            <summary>
            <![CDATA[*]]>
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.Operator.Remainder">
            <summary>
            <![CDATA[%]]>
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.Operator.Divided">
            <summary>
            <![CDATA[/]]>
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.Operator.LogicalOr">
            <summary>
            <![CDATA[|]]>
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.Operator.Or">
            <summary>
            <![CDATA[||]]>
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.Operator.LogicAnd">
            <summary>
            <![CDATA[&]]>
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.Operator.And">
            <summary>
            <![CDATA[&&]]>
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.Operator.GreaterThan">
            <summary>
            <![CDATA[>]]>
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.Operator.GreaterThanOrEqual">
            <summary>
            <![CDATA[>=]]>
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.Operator.LessThan">
            <summary>
            <![CDATA[<]]>
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.Operator.LessThanOrEqual">
            <summary>
            <![CDATA[<=]]>
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.Operator.Equal">
            <summary>
            <![CDATA[==]]>
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.Operator.NotEqual">
            <summary>
            <![CDATA[!=]]>
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.Operator.LeftParentheses">
            <summary>
            <![CDATA[(]]>
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.Operator.RightParentheses">
            <summary>
            <![CDATA[)]]>
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Parsers.BodyParser">
            <summary>
            BODY标签解析器
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.BodyParser.Parse(JinianNet.JNTemplate.TemplateParser,JinianNet.JNTemplate.Nodes.TokenCollection)">
            <summary>
            分析标签
            </summary>
            <param name="parser">TemplateParser</param>
            <param name="tc">Token集合</param>
            <returns></returns>
        </member>
        <member name="T:JinianNet.JNTemplate.Parsers.BooleanParser">
            <summary>
            bool标签分析器
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.BooleanParser.Parse(JinianNet.JNTemplate.TemplateParser,JinianNet.JNTemplate.Nodes.TokenCollection)">
            <summary>
            分析标签
            </summary>
            <param name="parser">TemplateParser</param>
            <param name="tc">Token集合</param>
            <returns></returns>
        </member>
        <member name="T:JinianNet.JNTemplate.Parsers.CommentParser">
            <summary>
            简单标标签分析器
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.CommentParser.Parse(JinianNet.JNTemplate.TemplateParser,JinianNet.JNTemplate.Nodes.TokenCollection)">
            <summary>
            分析标签
            </summary>
            <param name="parser">TemplateParser</param>
            <param name="tc">Token集合</param>
            <returns></returns>
        </member>
        <member name="T:JinianNet.JNTemplate.Parsers.ComplexParser">
            <summary>
            Complex标签分析器
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.ComplexParser.Parse(JinianNet.JNTemplate.TemplateParser,JinianNet.JNTemplate.Nodes.TokenCollection)">
            <summary>
            分析标签
            </summary>
            <param name="parser">TemplateParser</param>
            <param name="tc">Token集合</param>
            <returns></returns>
        </member>
        <member name="T:JinianNet.JNTemplate.Parsers.EleseParser">
            <summary>
            ELSE标签分析器
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.EleseParser.Parse(JinianNet.JNTemplate.TemplateParser,JinianNet.JNTemplate.Nodes.TokenCollection)">
            <summary>
            分析标签
            </summary>
            <param name="parser">TemplateParser</param>
            <param name="tc">Token集合</param>
            <returns></returns>
        </member>
        <member name="T:JinianNet.JNTemplate.Parsers.ElseifParser">
            <summary>
            ELSE IF标签分析器
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.ElseifParser.Parse(JinianNet.JNTemplate.TemplateParser,JinianNet.JNTemplate.Nodes.TokenCollection)">
            <summary>
            分析标签
            </summary>
            <param name="parser">TemplateParser</param>
            <param name="tc">Token集合</param>
            <returns></returns>
        </member>
        <member name="T:JinianNet.JNTemplate.Parsers.EndParser">
            <summary>
            End标签分析器
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.EndParser.Parse(JinianNet.JNTemplate.TemplateParser,JinianNet.JNTemplate.Nodes.TokenCollection)">
            <summary>
            分析标签
            </summary>
            <param name="parser">TemplateParser</param>
            <param name="tc">Token集合</param>
            <returns></returns>
        </member>
        <member name="T:JinianNet.JNTemplate.Parsers.ForeachParser">
            <summary>
            Foreach标签分析器
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.ForeachParser.Parse(JinianNet.JNTemplate.TemplateParser,JinianNet.JNTemplate.Nodes.TokenCollection)">
            <summary>
            分析标签
            </summary>
            <param name="parser">TemplateParser</param>
            <param name="tc">Token集合</param>
            <returns></returns>
        </member>
        <member name="T:JinianNet.JNTemplate.Parsers.ForParser">
            <summary>
            For标签分析器
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.ForParser.Parse(JinianNet.JNTemplate.TemplateParser,JinianNet.JNTemplate.Nodes.TokenCollection)">
            <summary>
            分析标签
            </summary>
            <param name="parser">TemplateParser</param>
            <param name="tc">Token集合</param>
            <returns></returns>
        </member>
        <member name="T:JinianNet.JNTemplate.Parsers.FunctionParser">
            <summary>
            Function标签分析器
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.FunctionParser.Parse(JinianNet.JNTemplate.TemplateParser,JinianNet.JNTemplate.Nodes.TokenCollection)">
            <summary>
            分析标签
            </summary>
            <param name="parser">TemplateParser</param>
            <param name="tc">Token集合</param>
            <returns></returns>
        </member>
        <member name="T:JinianNet.JNTemplate.Parsers.IfParser">
            <summary>
            IF标签分析器
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.IfParser.Parse(JinianNet.JNTemplate.TemplateParser,JinianNet.JNTemplate.Nodes.TokenCollection)">
            <summary>
            分析标签
            </summary>
            <param name="parser">TemplateParser</param>
            <param name="tc">Token集合</param>
            <returns></returns>
        </member>
        <member name="T:JinianNet.JNTemplate.Parsers.IncludeParser">
            <summary>
            Include标签分析器
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.IncludeParser.Parse(JinianNet.JNTemplate.TemplateParser,JinianNet.JNTemplate.Nodes.TokenCollection)">
            <summary>
            分析标签
            </summary>
            <param name="parser">TemplateParser</param>
            <param name="tc">Token集合</param>
            <returns></returns>
        </member>
        <member name="T:JinianNet.JNTemplate.Parsers.IndexValueParser">
            <summary>
            索引标签分析器
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.IndexValueParser.Parse(JinianNet.JNTemplate.TemplateParser,JinianNet.JNTemplate.Nodes.TokenCollection)">
            <summary>
            分析标签
            </summary>
            <param name="parser">TemplateParser</param>
            <param name="tc">Token集合</param>
            <returns></returns>
        </member>
        <member name="T:JinianNet.JNTemplate.Parsers.ITagParser">
            <summary>
            标签分析器
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.ITagParser.Parse(JinianNet.JNTemplate.TemplateParser,JinianNet.JNTemplate.Nodes.TokenCollection)">
            <summary>
            分析标签
            </summary>
            <param name="parser">TemplateParser</param>
            <param name="tc">Token集合</param>
            <returns></returns>
        </member>
        <member name="T:JinianNet.JNTemplate.Parsers.JsonParser">
            <summary>
            JSONParser
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.JsonParser.Parse(JinianNet.JNTemplate.TemplateParser,JinianNet.JNTemplate.Nodes.TokenCollection)">
            <summary>
            JSON分析标签
            </summary>
            <param name="parser">TemplateParser</param>
            <param name="tc">Token集合</param>
            <returns></returns>
        </member>
        <member name="T:JinianNet.JNTemplate.Parsers.LayoutParser">
            <summary>
            Layout标签解析器
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.LayoutParser.Parse(JinianNet.JNTemplate.TemplateParser,JinianNet.JNTemplate.Nodes.TokenCollection)">
            <summary>
            分析标签
            </summary>
            <param name="parser">TemplateParser</param>
            <param name="tc">Token集合</param>
            <returns></returns>
        </member>
        <member name="T:JinianNet.JNTemplate.Parsers.LoadParser">
            <summary>
            Load标签分析器
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.LoadParser.Parse(JinianNet.JNTemplate.TemplateParser,JinianNet.JNTemplate.Nodes.TokenCollection)">
            <summary>
            分析标签
            </summary>
            <param name="parser">TemplateParser</param>
            <param name="tc">Token集合</param>
            <returns></returns>
        </member>
        <member name="T:JinianNet.JNTemplate.Parsers.NullParser">
            <summary>
            NULL标签分析器
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.NullParser.Parse(JinianNet.JNTemplate.TemplateParser,JinianNet.JNTemplate.Nodes.TokenCollection)">
            <summary>
            分析标签
            </summary>
            <param name="parser">TemplateParser</param>
            <param name="tc">Token集合</param>
            <returns></returns>
        </member>
        <member name="T:JinianNet.JNTemplate.Parsers.NumberParser">
            <summary>
            数字标签分析器
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.NumberParser.Parse(JinianNet.JNTemplate.TemplateParser,JinianNet.JNTemplate.Nodes.TokenCollection)">
            <summary>
            分析标签
            </summary>
            <param name="parser">TemplateParser</param>
            <param name="tc">Token集合</param>
            <returns></returns>
        </member>
        <member name="T:JinianNet.JNTemplate.Parsers.SetParser">
            <summary>
            SET标签分析器
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.SetParser.Parse(JinianNet.JNTemplate.TemplateParser,JinianNet.JNTemplate.Nodes.TokenCollection)">
            <summary>
            分析标签
            </summary>
            <param name="parser">TemplateParser</param>
            <param name="tc">Token集合</param>
            <returns></returns>
        </member>
        <member name="T:JinianNet.JNTemplate.Parsers.StringParser">
            <summary>
            string标签分析器
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.StringParser.Parse(JinianNet.JNTemplate.TemplateParser,JinianNet.JNTemplate.Nodes.TokenCollection)">
            <summary>
            分析标签
            </summary>
            <param name="parser">TemplateParser</param>
            <param name="tc">Token集合</param>
            <returns></returns>
        </member>
        <member name="T:JinianNet.JNTemplate.Parsers.VariableParser">
            <summary>
            Variable标签分析器
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Parsers.VariableParser.Parse(JinianNet.JNTemplate.TemplateParser,JinianNet.JNTemplate.Nodes.TokenCollection)">
            <summary>
            分析标签
            </summary>
            <param name="parser">TemplateParser</param>
            <param name="tc">Token集合</param>
            <returns>标签</returns>
        </member>
        <member name="T:JinianNet.JNTemplate.Resources.FileLoader">
            <summary>
            文件加载器
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Resources.FileLoader.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Resources.FileLoader.GetDirectoryName(System.String)">
            <summary>
            获取父目录
            </summary>
            <param name="fullPath"></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Resources.FileLoader.Load(System.String,System.Text.Encoding,System.String[])">
            <summary>
            加载资源
            </summary>
            <param name="filename">文件名,可以是纯文件名,也可以是完整的路径</param>
            <param name="encoding">编码</param>
            <param name="directory">追加查找目录</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Resources.FileLoader.FindFullPath(System.String,System.String[])">
            <summary>
            获取完整路径
            </summary>
            <param name="filename">文件名,可以是纯文件名,也可以是完整的路径</param>
            <param name="directory">SEARCH DIRECTORY</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Resources.FileLoader.FindPath(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            查找指定文件
            </summary>
            <param name="paths">检索路径</param>
            <param name="filename">文件名 允许相对路径.路径分隔符只能使用/</param>
            <returns>路径索引</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Resources.FileLoader.LoadResource(System.String,System.Text.Encoding)">
            <summary>
            载入文件
            </summary>
            <param name="fullPath">完整文件路径</param>
            <param name="encoding">编码</param>
            <returns>文本内容</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Resources.FileLoader.IsWindowsAbsolutePath(System.String)">
            <summary>
            是否WIN风格绝对路径
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Resources.FileLoader.IsUnixAbsolutePath(System.String)">
            <summary>
            是否Unix风格绝对路径
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Resources.FileLoader.IsAbsolutePath(System.String)">
            <summary>
            是否绝对路径表达形式
            </summary>
            <param name="path">路径</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Resources.FileLoader.NormalizePath(System.String)">
            <summary>
            路径处理
            </summary>
            <param name="filename">待处理文件</param>
            <returns>处理后的路径</returns>
        </member>
        <member name="T:JinianNet.JNTemplate.Resources.IResourceLoader">
            <summary>
            资源加载器
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Resources.IResourceLoader.Load(System.String,System.Text.Encoding,System.String[])">
            <summary>
            加载资源
            </summary>
            <param name="filename">文件名,可以是纯文件名,也可以是完整的路径</param>
            <param name="encoding">编码</param>
            <param name="directory">追加查找目录</param>
            <returns>ResourceInfo</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Resources.IResourceLoader.FindFullPath(System.String,System.String[])">
            <summary>
            获取完整路径
            </summary>
            <param name="filename">文件名,可以是纯文件名,也可以是完整的路径</param>
            <param name="directory">SEARCH DIRECTORY</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Resources.IResourceLoader.GetDirectoryName(System.String)">
            <summary>
            获取父目录
            </summary>
            <param name="fullPath">完整路径</param>
            <returns></returns>
        </member>
        <member name="T:JinianNet.JNTemplate.Resources.ResourceInfo">
            <summary>
            资源信息
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Resources.ResourceInfo.Content">
            <summary>
            内容
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Resources.ResourceInfo.FullPath">
            <summary>
            完整路径
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Runtime">
            <summary>
            提供运行时的通用方法与属性
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Runtime.Store">
            <summary>
            config store
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Runtime.#cctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Runtime.Configure(System.Collections.Generic.IDictionary{System.String,System.String},JinianNet.JNTemplate.VariableScope)">
            <summary>
            引擎配置
            </summary>
            <param name="conf">配置内容</param>
            <param name="scope">初始数据</param>
        </member>
        <member name="P:JinianNet.JNTemplate.Runtime.ResourceDirectories">
            <summary>
            模板资源搜索目录
            </summary>
            <value></value>
        </member>
        <member name="P:JinianNet.JNTemplate.Runtime.Data">
            <summary>
            全局初始数据
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Runtime.Loader">
            <summary>
            加载器
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Runtime.Encoding">
            <summary>
            Default encoding
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Runtime.Cache">
            <summary>
            Cache
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Runtime.Actuator">
            <summary>
            Actuator
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Runtime.Templates">
            <summary>
            Compile Templates
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Runtime.SetLoader(JinianNet.JNTemplate.Resources.IResourceLoader)">
            <summary>
            
            </summary>
            <param name="loader"></param>
        </member>
        <member name="M:JinianNet.JNTemplate.Runtime.AppendResourcePath(System.String)">
            <summary>
            
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:JinianNet.JNTemplate.Runtime.GetEnvironmentVariable(System.String)">
            <summary>
            获取环境变量
            </summary>
            <param name="variable">变量名称</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Runtime.SetEnvironmentVariable(System.String,System.String)">
            <summary>
            设置环境变量
            </summary>
            <param name="variable">变量名</param>
            <param name="value">值</param>
        </member>
        <member name="M:JinianNet.JNTemplate.Runtime.RegisterTagParser(JinianNet.JNTemplate.Parsers.ITagParser,System.Int32)">
            <summary>
            装载标签解析器
            </summary>
            <param name="parser">ITagParser</param>
            <param name="index">索引</param>
        </member>
        <member name="M:JinianNet.JNTemplate.Runtime.Parsing(JinianNet.JNTemplate.TemplateParser,JinianNet.JNTemplate.Nodes.TokenCollection)">
            <summary>
            分析标签
            </summary>
            <param name="parser"></param>
            <param name="tc"></param>
            <returns></returns>
        </member>
        <member name="T:JinianNet.JNTemplate.Runtime.RuntimeStore">
            <summary>
            core
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Runtime.RuntimeStore.CreateStore">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Runtime.RuntimeStore.Initialization(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            初始化基本数据
            </summary>
            <param name="dict"></param>
        </member>
        <member name="P:JinianNet.JNTemplate.Runtime.RuntimeStore.Data">
            <summary>
            全局初始数据
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Runtime.RuntimeStore.Loader">
            <summary>
            加载器
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Runtime.RuntimeStore.BindIgnoreCase">
            <summary>
            绑定大小写配置
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Runtime.RuntimeStore.ComparerIgnoreCase">
            <summary>
            字符串大小写比较配置
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Runtime.RuntimeStore.ComparisonIgnoreCase">
            <summary>
            字符串大小写比较配置
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Runtime.RuntimeStore.Encoding">
            <summary>
            Default encoding
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Runtime.RuntimeStore.Cache">
            <summary>
            Cache
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Runtime.RuntimeStore.Actuator">
            <summary>
            Actuator
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Runtime.RuntimeStore.ResourceDirectories">
            <summary>
            模板资源搜索目录
            </summary>
            <value></value>
        </member>
        <member name="P:JinianNet.JNTemplate.Runtime.RuntimeStore.Variable">
            <summary>
            
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Runtime.RuntimeStore.Parsers">
            <summary>
            
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Runtime.RuntimeStore.EnableCompile">
            <summary>
            是否启用编译模式
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Runtime.RuntimeStore.EnableTemplateCache">
            <summary>
            是否启用模板缓存
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.Runtime.RuntimeStore.Templates">
            <summary>
            
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.TagExtensions">
            <summary>
            tag Extensions
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.TagExtensions.ToSource(JinianNet.JNTemplate.Nodes.ITag)">
            <summary>
            获取标签的源代码
            </summary>
            <param name="tag">标签</param>
            <returns>string</returns>
        </member>
        <member name="T:JinianNet.JNTemplate.Template">
            <summary>
            模板实例类
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Template.#ctor">
            <summary>
            Template
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Template.#ctor(JinianNet.JNTemplate.TemplateContext,System.String)">
            <summary>
            Template
            </summary>
            <param name="ctx">TemplateContext 对象</param>
            <param name="text">模板内容</param>
        </member>
        <member name="T:JinianNet.JNTemplate.TemplateBase">
            <summary>
            基本模板
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.TemplateBase.TemplateKey">
            <summary>
            模板KEY(用于缓存，默认为文路径)
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.TemplateBase.Context">
            <summary>
            模板上下文
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.TemplateBase.TemplateContent">
            <summary>
            模板内容
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateBase.Set``1(System.String,``0)">
            <summary>
            设置数据
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateBase.SetStaticType(System.String,System.Type)">
            <summary>
            设置静态对象
            </summary>
            <param name="key">对象名</param>
            <param name="type">类型</param>
        </member>
        <member name="T:JinianNet.JNTemplate.TemplateCollection`1">
             <summary>
            TemplatesCollection
             </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateCollection`1.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.TemplateCollection`1.Count">
            <summary>
            template count
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.TemplateCollection`1.Item(System.String)">
            <summary>
            get or set template
            </summary>
            <param name="name">template name</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateCollection`1.Remove(System.String)">
            <summary>
            remove template
            </summary>
            <param name="name">template name</param>
            <returns></returns>
        </member>
        <member name="P:JinianNet.JNTemplate.TemplateCollection`1.Keys">
            <summary>
            keys
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateCollection`1.Clear">
            <summary>
            clear data
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.TemplateContext">
            <summary>
            Context
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateContext.#ctor(JinianNet.JNTemplate.VariableScope)">
            <summary>
            模板上下文
            </summary>
            <param name="data">模板数据</param>  
        </member>
        <member name="P:JinianNet.JNTemplate.TemplateContext.EnableTemplateCache">
            <summary>
            启用模板缓存
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.TemplateContext.TempData">
            <summary>
            模板数据
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.TemplateContext.AllErrors">
            <summary>
            当前异常集合（当ThrowExceptions为false时有效）
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.TemplateContext.Error">
            <summary>
            获取当前第一个异常信息（当ThrowExceptions为false时有效）
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateContext.AddError(System.Exception)">
            <summary>
            将异常添加到当前 异常集合中。
            </summary>
            <param name="e">异常</param>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateContext.ClearError">
            <summary>
            清除所有异常
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateContext.CreateContext(JinianNet.JNTemplate.TemplateContext)">
            <summary>
            从指定TemplateContext创建一个类似的实例
            </summary>
            <param name="context"></param>
            <returns>TemplateContext</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateContext.Clone">
            <summary>
            浅克隆当前实例
            </summary>
            <returns></returns>
        </member>
        <member name="T:JinianNet.JNTemplate.TemplateContextExtensions">
            <summary>
            TemplateContex扩展类
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateContextExtensions.GetResourceDirectories(JinianNet.JNTemplate.Context)">
            <summary>
            获取当前
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateContextExtensions.Load(JinianNet.JNTemplate.Context,System.String)">
            <summary>
            加载资源
            </summary>
            <param name="fileName">文件名,可以是纯文件名,也可以是完整的路径</param> 
            <param name="ctx">上下文</param>
            <returns>ResourceInfo</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateContextExtensions.FindFullPath(JinianNet.JNTemplate.Context,System.String)">
            <summary>
            获取完整路径
            </summary>
            <param name="fileName">文件名,可以是纯文件名,也可以是完整的路径</param> 
            <param name="ctx">上下文</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateContextExtensions.CopyTo(JinianNet.JNTemplate.TemplateContext,JinianNet.JNTemplate.Compile.CompileContext)">
            <summary>
            TemplateContext CopyTo CompileContext
            </summary>
            <param name="ctx1">TemplateContext</param>
            <param name="ctx2">CompileContext</param>
        </member>
        <member name="T:JinianNet.JNTemplate.TemplateExtensions">
            <summary>
            Template Extensions
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateExtensions.Render(JinianNet.JNTemplate.ITemplate)">
            <summary>
            模板解析结果呈现
            </summary>
            <param name="template">template</param>
            <returns>string</returns>
        </member>
        <member name="T:JinianNet.JNTemplate.TemplateLexer">
            <summary>
            词素分析器
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.TemplateLexer.flagMode">
            <summary>
            标记模式
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.TemplateLexer.document">
            <summary>
            当前文档
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.TemplateLexer.column">
            <summary>
            当前列
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.TemplateLexer.line">
            <summary>
            当前行
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.TemplateLexer.kind">
            <summary>
            当前TokenKind
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.TemplateLexer.startColumn">
            <summary>
            起始列
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.TemplateLexer.startLine">
            <summary>
            起始行
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.TemplateLexer.scanner">
            <summary>
            扫描器
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.TemplateLexer.collection">
            <summary>
            token集合
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.TemplateLexer.token">
            <summary>
            当前TOKEN
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.TemplateLexer.pos">
            <summary>
            符号集合
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateLexer.#ctor(System.String)">
            <summary>
            TemplateLexer
            </summary>
            <param name="text">待分析内容</param>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateLexer.Reset">
            <summary>
            重置分析器
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.TemplateLexer.Current">
            <summary>
            当前TOKEN
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateLexer.MoveNext">
            <summary>
            获取下一个TOKEN
            </summary>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateLexer.GetEnumerator">
            <summary>
            获取IEnumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateLexer.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            获取IEnumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateLexer.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateLexer.Execute">
            <summary>
            执行解析
            </summary>
            <returns></returns>
        </member>
        <member name="T:JinianNet.JNTemplate.TemplateParser">
            <summary>
            TemplateParser
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateParser.#ctor(JinianNet.JNTemplate.Nodes.Token[])">
            <summary>
            模板分析器
            </summary> 
            <param name="ts">TOKEN集合</param>
        </member>
        <member name="P:JinianNet.JNTemplate.TemplateParser.Current">
            <summary>
            当前标签
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateParser.MoveNext">
            <summary>
            读取下一个标签
            </summary>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateParser.Reset">
            <summary>
            重置
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateParser.Read(JinianNet.JNTemplate.Nodes.TokenCollection)">
            <summary>
            读取一个标签
            </summary>
            <param name="tc">TOKEN集合</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateParser.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateParser.Execute">
            <summary>
            执行TAG解析
            </summary>
            <returns></returns>
        </member>
        <member name="T:JinianNet.JNTemplate.TemplateRender">
            <summary>
            基本模板呈现
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateRender.Render(System.IO.TextWriter)">
            <summary>
            呈现内容
            </summary>
            <param name="writer">TextWriter</param>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateRender.Render(System.IO.TextWriter,JinianNet.JNTemplate.Nodes.ITag[])">
            <summary>
            呈现内容
            </summary>
            <param name="writer">TextWriter</param>
            <param name="collection">Tags</param>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateRender.ReadAll(System.String)">
            <summary>
            read all tags
            </summary>
            <param name="text">text content</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.TemplateRender.ThrowException(JinianNet.JNTemplate.Exception.TemplateException,JinianNet.JNTemplate.Nodes.ITag,System.IO.TextWriter)">
            <summary>
            异常处理
            </summary>
            <param name="e">异常信息</param>
            <param name="tag">影响标签</param>
            <param name="writer">TextWriter</param>
        </member>
        <member name="T:JinianNet.JNTemplate.TokenKind">
            <summary>
            Token种类
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.TokenKind.None">
            <summary>
            无
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.TokenKind.Text">
            <summary>
            非标签文本
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.TokenKind.TextData">
            <summary>
            标签内文本
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.TokenKind.Tag">
            <summary>
            标签
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.TokenKind.TagStart">
            <summary>
            标签开始标记
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.TokenKind.TagEnd">
            <summary>
            标签结束标记
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.TokenKind.String">
            <summary>
            字符串
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.TokenKind.Number">
            <summary>
            数字
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.TokenKind.LeftBracket">
            <summary>
            左中括号
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.TokenKind.RightBracket">
            <summary>
            右中括号
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.TokenKind.LeftParentheses">
            <summary>
            左圆括号
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.TokenKind.RightParentheses">
            <summary>
            右圆括号
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.TokenKind.LeftBrace">
            <summary>
            左大括号
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.TokenKind.RightBrace">
            <summary>
            右大括号
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.TokenKind.NewLine">
            <summary>
            新行（换行符）
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.TokenKind.Dot">
            <summary>
            点
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.TokenKind.StringStart">
            <summary>
            字符串开始
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.TokenKind.StringEnd">
            <summary>
            字符串结束
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.TokenKind.Space">
            <summary>
            空格
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.TokenKind.Punctuation">
            <summary>
            标点
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.TokenKind.Operator">
            <summary>
            运算符
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.TokenKind.Comma">
            <summary>
            逗号
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.TokenKind.Colon">
            <summary>
            冒号
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.TokenKind.Comment">
            <summary>
            注释
            </summary>
        </member>
        <member name="F:JinianNet.JNTemplate.TokenKind.EOF">
            <summary>
            结束
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.Utility">
            <summary>
            公用类
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.Utility.StringToBoolean(System.String)">
            <summary>
            字符串转布尔
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Utility.ToBoolean(System.String)">
            <summary>
            转布尔
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Utility.ToBoolean(System.Int32)">
            <summary>
            转布尔
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Utility.ToBoolean(System.Double)">
            <summary>
            转布尔
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Utility.ToBoolean(System.Decimal)">
            <summary>
            转布尔
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Utility.ToBoolean(System.Int16)">
            <summary>
            转布尔
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Utility.ToBoolean(System.Int64)">
            <summary>
            转布尔
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Utility.ToBoolean(System.Single)">
            <summary>
            转布尔
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Utility.ToBoolean(System.Boolean)">
            <summary>
            转布尔
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Utility.ToBoolean(System.Object)">
            <summary>
            转布尔
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Utility.IsLetter(System.Char)">
            <summary>
            是否英文字母
            </summary>
            <param name="value">字符</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Utility.AllowWord(System.Char)">
            <summary>
            是否单词
            </summary>
            <param name="value">字符</param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Utility.IsEqual(System.String,System.String)">
            <summary>
            字符串是否相同
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:JinianNet.JNTemplate.Utility.Md5(System.String)">
            <summary>
            MD5
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:JinianNet.JNTemplate.VariableElement">
            <summary>
            变量元素
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.VariableElement.#ctor(System.Type,System.Object)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="value"></param>
        </member>
        <member name="P:JinianNet.JNTemplate.VariableElement.Type">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.VariableElement.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.VariableElement`1">
            <summary>
            变量元素
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.VariableElement`1.Type">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.VariableElement`1.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="T:JinianNet.JNTemplate.VariableScope">
            <summary>
            变量域
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.VariableScope.#ctor">
            <summary>
            无参构造函数
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.VariableScope.#ctor(JinianNet.JNTemplate.VariableScope)">
            <summary>
            以父VariableScope与字典来初始化对象
            </summary>
            <param name="parent">父VariableScope</param> 
        </member>
        <member name="M:JinianNet.JNTemplate.VariableScope.Clear(System.Boolean)">
            <summary>
            清空数据
            </summary>
            <param name="all">是否清空父数据</param>
        </member>
        <member name="M:JinianNet.JNTemplate.VariableScope.Clear">
            <summary>
            清空数据
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.VariableScope.Parent">
            <summary>
            父对象
            </summary>
        </member>
        <member name="P:JinianNet.JNTemplate.VariableScope.Item(System.String)">
            <summary>
            获取索引值
            </summary>
            <param name="name">索引名称</param>
            <returns>object</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.VariableScope.Update``1(System.String,``0)">
            <summary>
            update data
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:JinianNet.JNTemplate.VariableScope.ContainsKey(System.String)">
            <summary>
            是否包含指定键
            </summary>
            <param name="key">键</param>
            <returns>bool</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.VariableScope.Remove(System.String)">
            <summary>
            移除指定对象
            </summary>
            <param name="key"></param>
            <returns>是否移除成功</returns>
        </member>
        <member name="P:JinianNet.JNTemplate.VariableScope.Count">
            <summary>
            count
            </summary>
        </member>
        <member name="M:JinianNet.JNTemplate.VariableScope.GetElement(System.String)">
            <summary>
            获取索引值
            </summary>
            <param name="name">索引名称</param>
            <returns>VariableElement</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.VariableScope.GetType(System.String)">
            <summary>
            获取结果类型
            </summary>
            <param name="name">索引名称</param>
            <returns>Type</returns>
        </member>
        <member name="M:JinianNet.JNTemplate.VariableScope.Set``1(System.String,``0)">
            <summary>
            添加数据
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <typeparam name="T">值类型</typeparam>
        </member>
        <member name="M:JinianNet.JNTemplate.VariableScope.Set(System.String,System.Object,System.Type)">
            <summary>
            添加数据
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="type">值类型</param>
        </member>
        <member name="M:JinianNet.JNTemplate.VariableScope.SetElement(System.String,JinianNet.JNTemplate.VariableElement)">
            <summary>
            添加数据
            </summary>
            <param name="key">键</param> 
            <param name="element">值</param>
        </member>
    </members>
</doc>
